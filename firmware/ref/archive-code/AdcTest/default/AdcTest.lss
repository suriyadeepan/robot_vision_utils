
AdcTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b4  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000130  00000000  00000000  00000385  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001cd  00000000  00000000  000004b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d8  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
typedef unsigned char uchar;


void adc_init()
{
	ADMUX=(1<<REFS0);
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	// to set AREF => "01"...


	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1);
  96:	8e e8       	ldi	r24, 0x8E	; 142
  98:	86 b9       	out	0x06, r24	; 6
	// enable ADC...
	// enable interrupt...
	// setting prescaler as 64 ==> "110"...
}
  9a:	08 95       	ret

0000009c <adc_read>:
uint adc_read()
{

	uchar ch=0x00;

	ADMUX|=ch;
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	87 b9       	out	0x07, r24	; 7

	ADCSRA|=0x40;
  a0:	36 9a       	sbi	0x06, 6	; 6

	//wait for conversion...
	while(!(ADCSRA & 0x10));
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <adc_read+0x6>

	ADCSRA|=(1<<ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
  a8:	24 b1       	in	r18, 0x04	; 4
  aa:	35 b1       	in	r19, 0x05	; 5





}
  ac:	c9 01       	movw	r24, r18
  ae:	08 95       	ret

000000b0 <main>:

int main()
{
	

	DDRD=0xff;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	81 bb       	out	0x11, r24	; 17
typedef unsigned char uchar;


void adc_init()
{
	ADMUX=(1<<REFS0);
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	87 b9       	out	0x07, r24	; 7
	// to set AREF => "01"...


	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1);
  b8:	8e e8       	ldi	r24, 0x8E	; 142
  ba:	86 b9       	out	0x06, r24	; 6

		if(temp<8)
		PORTD=(0x01)<<temp;

		else
		PORTD=0xff;
  bc:	4f ef       	ldi	r20, 0xFF	; 255

		//temp/=100;


		if(temp<8)
		PORTD=(0x01)<<temp;
  be:	e1 e0       	ldi	r30, 0x01	; 1
  c0:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	20 e5       	ldi	r18, 0x50	; 80
  c4:	33 ec       	ldi	r19, 0xC3	; 195
uint adc_read()
{

	uchar ch=0x00;

	ADMUX|=ch;
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	87 b9       	out	0x07, r24	; 7

	ADCSRA|=0x40;
  ca:	36 9a       	sbi	0x06, 6	; 6

	//wait for conversion...
	while(!(ADCSRA & 0x10));
  cc:	34 9b       	sbis	0x06, 4	; 6
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x1c>

	ADCSRA|=(1<<ADIF);
  d0:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	95 b1       	in	r25, 0x05	; 5
	while(1)
	{
		uint val1=adc_read();


		uchar temp=val1/100;
  d6:	64 e6       	ldi	r22, 0x64	; 100
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 7e 00 	call	0xfc	; 0xfc <__udivmodhi4>
		//PORTD=temp;				

		//temp/=100;


		if(temp<8)
  de:	68 30       	cpi	r22, 0x08	; 8
  e0:	40 f4       	brcc	.+16     	; 0xf2 <main+0x42>
		PORTD=(0x01)<<temp;
  e2:	cf 01       	movw	r24, r30
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x3a>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <main+0x36>
  ee:	82 bb       	out	0x12, r24	; 18
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <main+0x44>

		else
		PORTD=0xff;
  f2:	42 bb       	out	0x12, r20	; 18
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x46>
  fa:	e5 cf       	rjmp	.-54     	; 0xc6 <main+0x16>

000000fc <__udivmodhi4>:
  fc:	aa 1b       	sub	r26, r26
  fe:	bb 1b       	sub	r27, r27
 100:	51 e1       	ldi	r21, 0x11	; 17
 102:	07 c0       	rjmp	.+14     	; 0x112 <__udivmodhi4_ep>

00000104 <__udivmodhi4_loop>:
 104:	aa 1f       	adc	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	a6 17       	cp	r26, r22
 10a:	b7 07       	cpc	r27, r23
 10c:	10 f0       	brcs	.+4      	; 0x112 <__udivmodhi4_ep>
 10e:	a6 1b       	sub	r26, r22
 110:	b7 0b       	sbc	r27, r23

00000112 <__udivmodhi4_ep>:
 112:	88 1f       	adc	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	a9 f7       	brne	.-22     	; 0x104 <__udivmodhi4_loop>
 11a:	80 95       	com	r24
 11c:	90 95       	com	r25
 11e:	bc 01       	movw	r22, r24
 120:	cd 01       	movw	r24, r26
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
