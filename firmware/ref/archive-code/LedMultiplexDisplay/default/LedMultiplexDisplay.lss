
LedMultiplexDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000318  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006d  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000220  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000181  00000000  00000000  000005e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000303  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011a  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e8  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8a:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_timer0>:
unsigned int count=0;

void init_timer0()
{
	
	TCCR0=0x03;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	83 bf       	out	0x33, r24	; 51
	// set prescalar as 64

	TIMSK|=(1<<TOIE0);
  96:	89 b7       	in	r24, 0x39	; 57
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	89 bf       	out	0x39, r24	; 57
	// for enabling overflow interrupt

	TCNT0=0;
  9c:	12 be       	out	0x32, r1	; 50
	// init counter

	
}
  9e:	08 95       	ret

000000a0 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	if(count==61)
  ae:	80 91 62 00 	lds	r24, 0x0062
  b2:	90 91 63 00 	lds	r25, 0x0063
  b6:	8d 33       	cpi	r24, 0x3D	; 61
  b8:	91 05       	cpc	r25, r1
  ba:	71 f4       	brne	.+28     	; 0xd8 <__vector_9+0x38>
	{
		num++;
  bc:	80 91 60 00 	lds	r24, 0x0060
  c0:	90 91 61 00 	lds	r25, 0x0061
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 61 00 	sts	0x0061, r25
  ca:	80 93 60 00 	sts	0x0060, r24
		count=0;
  ce:	10 92 63 00 	sts	0x0063, r1
  d2:	10 92 62 00 	sts	0x0062, r1
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <__vector_9+0x42>

	}

	else
	count++;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	90 93 63 00 	sts	0x0063, r25
  de:	80 93 62 00 	sts	0x0062, r24


}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:

int main()
{
  f0:	8f 92       	push	r8
  f2:	9f 92       	push	r9
  f4:	af 92       	push	r10
  f6:	bf 92       	push	r11
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29

		DDRA=0xfc;
 106:	8c ef       	ldi	r24, 0xFC	; 252
 108:	8a bb       	out	0x1a, r24	; 26
		DDRD=0xff;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	81 bb       	out	0x11, r24	; 17
		DDRB=0x0f;
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	87 bb       	out	0x17, r24	; 23

		PORTB=0x00;	
 112:	18 ba       	out	0x18, r1	; 24
unsigned int count=0;

void init_timer0()
{
	
	TCCR0=0x03;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	83 bf       	out	0x33, r24	; 51
	// set prescalar as 64

	TIMSK|=(1<<TOIE0);
 118:	89 b7       	in	r24, 0x39	; 57
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	89 bf       	out	0x39, r24	; 57
	// for enabling overflow interrupt

	TCNT0=0;
 11e:	12 be       	out	0x32, r1	; 50
		
		int tempNum=0;

		init_timer0();

		sei();
 120:	78 94       	sei
		{
			num--;
		}

		if(num<0)
		num=9999;
 122:	2f e0       	ldi	r18, 0x0F	; 15
 124:	82 2e       	mov	r8, r18
 126:	27 e2       	ldi	r18, 0x27	; 39
 128:	92 2e       	mov	r9, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12a:	92 ee       	ldi	r25, 0xE2	; 226
 12c:	a9 2e       	mov	r10, r25
 12e:	94 e0       	ldi	r25, 0x04	; 4
 130:	b9 2e       	mov	r11, r25

		uchar control=0x08;
		
		int x=1000;

		if(PINA & 0x01)
 132:	c8 9b       	sbis	0x19, 0	; 25
 134:	09 c0       	rjmp	.+18     	; 0x148 <main+0x58>
		{
			num++;
 136:	80 91 60 00 	lds	r24, 0x0060
 13a:	90 91 61 00 	lds	r25, 0x0061
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 61 00 	sts	0x0061, r25
 144:	80 93 60 00 	sts	0x0060, r24
		}


		if(PINA & 0x02)
 148:	c9 9b       	sbis	0x19, 1	; 25
 14a:	09 c0       	rjmp	.+18     	; 0x15e <main+0x6e>
		{
			num--;
 14c:	80 91 60 00 	lds	r24, 0x0060
 150:	90 91 61 00 	lds	r25, 0x0061
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	90 93 61 00 	sts	0x0061, r25
 15a:	80 93 60 00 	sts	0x0060, r24
		}

		if(num<0)
 15e:	80 91 60 00 	lds	r24, 0x0060
 162:	90 91 61 00 	lds	r25, 0x0061
 166:	97 ff       	sbrs	r25, 7
 168:	04 c0       	rjmp	.+8      	; 0x172 <main+0x82>
		num=9999;
 16a:	90 92 61 00 	sts	0x0061, r9
 16e:	80 92 60 00 	sts	0x0060, r8

		if(num>9999)
 172:	80 91 60 00 	lds	r24, 0x0060
 176:	90 91 61 00 	lds	r25, 0x0061
 17a:	80 51       	subi	r24, 0x10	; 16
 17c:	97 42       	sbci	r25, 0x27	; 39
 17e:	24 f0       	brlt	.+8      	; 0x188 <main+0x98>
		num=0;
 180:	10 92 61 00 	sts	0x0061, r1
 184:	10 92 60 00 	sts	0x0060, r1
		
		
		tempNum=num;
 188:	e0 90 60 00 	lds	r14, 0x0060
 18c:	f0 90 61 00 	lds	r15, 0x0061
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	d8 2e       	mov	r13, r24
 194:	c8 ee       	ldi	r28, 0xE8	; 232
 196:	d3 e0       	ldi	r29, 0x03	; 3
 198:	00 e0       	ldi	r16, 0x00	; 0
 19a:	10 e0       	ldi	r17, 0x00	; 0

		while(x>=1)
		{
			PORTB=control;
 19c:	d8 ba       	out	0x18, r13	; 24
			printDigit(tempNum/x);
 19e:	c7 01       	movw	r24, r14
 1a0:	be 01       	movw	r22, r28
 1a2:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
 1a6:	cb 01       	movw	r24, r22
 1a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <printDigit>
 1ac:	c5 01       	movw	r24, r10
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xbe>
			_delay_ms(5);
			tempNum%=x;
 1b2:	c7 01       	movw	r24, r14
 1b4:	be 01       	movw	r22, r28
 1b6:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
 1ba:	7c 01       	movw	r14, r24
			x/=10;
 1bc:	ce 01       	movw	r24, r28
 1be:	6a e0       	ldi	r22, 0x0A	; 10
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
 1c6:	eb 01       	movw	r28, r22
			control=control>>1;
 1c8:	d6 94       	lsr	r13
 1ca:	0f 5f       	subi	r16, 0xFF	; 255
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
		num=0;
		
		
		tempNum=num;

		while(x>=1)
 1ce:	04 30       	cpi	r16, 0x04	; 4
 1d0:	11 05       	cpc	r17, r1
 1d2:	21 f7       	brne	.-56     	; 0x19c <main+0xac>
 1d4:	ae cf       	rjmp	.-164    	; 0x132 <main+0x42>

000001d6 <printDigit>:
#include <avr/io.h>
#include "SevenSegment.h"

void printDigit(int count)
{		
		switch(count)
 1d6:	84 30       	cpi	r24, 0x04	; 4
 1d8:	91 05       	cpc	r25, r1
 1da:	61 f1       	breq	.+88     	; 0x234 <printDigit+0x5e>
 1dc:	85 30       	cpi	r24, 0x05	; 5
 1de:	91 05       	cpc	r25, r1
 1e0:	7c f4       	brge	.+30     	; 0x200 <printDigit+0x2a>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 05       	cpc	r25, r1
 1e6:	01 f1       	breq	.+64     	; 0x228 <printDigit+0x52>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	1c f4       	brge	.+6      	; 0x1f4 <printDigit+0x1e>
 1ee:	89 2b       	or	r24, r25
 1f0:	c9 f0       	breq	.+50     	; 0x224 <printDigit+0x4e>
 1f2:	2c c0       	rjmp	.+88     	; 0x24c <printDigit+0x76>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	91 05       	cpc	r25, r1
 1f8:	c9 f0       	breq	.+50     	; 0x22c <printDigit+0x56>
 1fa:	03 97       	sbiw	r24, 0x03	; 3
 1fc:	39 f5       	brne	.+78     	; 0x24c <printDigit+0x76>
 1fe:	18 c0       	rjmp	.+48     	; 0x230 <printDigit+0x5a>
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	91 05       	cpc	r25, r1
 204:	e9 f0       	breq	.+58     	; 0x240 <printDigit+0x6a>
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	91 05       	cpc	r25, r1
 20a:	34 f4       	brge	.+12     	; 0x218 <printDigit+0x42>
 20c:	85 30       	cpi	r24, 0x05	; 5
 20e:	91 05       	cpc	r25, r1
 210:	99 f0       	breq	.+38     	; 0x238 <printDigit+0x62>
 212:	06 97       	sbiw	r24, 0x06	; 6
 214:	d9 f4       	brne	.+54     	; 0x24c <printDigit+0x76>
 216:	12 c0       	rjmp	.+36     	; 0x23c <printDigit+0x66>
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	91 05       	cpc	r25, r1
 21c:	99 f0       	breq	.+38     	; 0x244 <printDigit+0x6e>
 21e:	09 97       	sbiw	r24, 0x09	; 9
 220:	a9 f4       	brne	.+42     	; 0x24c <printDigit+0x76>
 222:	12 c0       	rjmp	.+36     	; 0x248 <printDigit+0x72>
		{
			case 0:
			PORTD=0xfc;
 224:	8c ef       	ldi	r24, 0xFC	; 252
 226:	13 c0       	rjmp	.+38     	; 0x24e <printDigit+0x78>
			break;

			case 1:
			PORTD=0b01100000;
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	11 c0       	rjmp	.+34     	; 0x24e <printDigit+0x78>
			break;

			case 2:
			PORTD=0xda;
 22c:	8a ed       	ldi	r24, 0xDA	; 218
 22e:	0f c0       	rjmp	.+30     	; 0x24e <printDigit+0x78>
			break;


			case 3:
			PORTD=0xf2;
 230:	82 ef       	ldi	r24, 0xF2	; 242
 232:	0d c0       	rjmp	.+26     	; 0x24e <printDigit+0x78>
			break;

			case 4:
			PORTD=0b01100110;
 234:	86 e6       	ldi	r24, 0x66	; 102
 236:	0b c0       	rjmp	.+22     	; 0x24e <printDigit+0x78>
			break;

			case 5:
			PORTD=0b10110110;
 238:	86 eb       	ldi	r24, 0xB6	; 182
 23a:	09 c0       	rjmp	.+18     	; 0x24e <printDigit+0x78>
			break;

			case 6:
			PORTD=0b10111110;
 23c:	8e eb       	ldi	r24, 0xBE	; 190
 23e:	07 c0       	rjmp	.+14     	; 0x24e <printDigit+0x78>
			break;

			case 7:
			PORTD=0b11100000;
 240:	80 ee       	ldi	r24, 0xE0	; 224
 242:	05 c0       	rjmp	.+10     	; 0x24e <printDigit+0x78>
			break;


			case 8:
			PORTD=0b11111110;
 244:	8e ef       	ldi	r24, 0xFE	; 254
 246:	03 c0       	rjmp	.+6      	; 0x24e <printDigit+0x78>
			break;

			case 9:
			PORTD=0b11110110;
 248:	86 ef       	ldi	r24, 0xF6	; 246
 24a:	01 c0       	rjmp	.+2      	; 0x24e <printDigit+0x78>
			break;

			default:
			PORTD=0x02;
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <__divmodhi4>:
 252:	97 fb       	bst	r25, 7
 254:	09 2e       	mov	r0, r25
 256:	07 26       	eor	r0, r23
 258:	0a d0       	rcall	.+20     	; 0x26e <__divmodhi4_neg1>
 25a:	77 fd       	sbrc	r23, 7
 25c:	04 d0       	rcall	.+8      	; 0x266 <__divmodhi4_neg2>
 25e:	0c d0       	rcall	.+24     	; 0x278 <__udivmodhi4>
 260:	06 d0       	rcall	.+12     	; 0x26e <__divmodhi4_neg1>
 262:	00 20       	and	r0, r0
 264:	1a f4       	brpl	.+6      	; 0x26c <__divmodhi4_exit>

00000266 <__divmodhi4_neg2>:
 266:	70 95       	com	r23
 268:	61 95       	neg	r22
 26a:	7f 4f       	sbci	r23, 0xFF	; 255

0000026c <__divmodhi4_exit>:
 26c:	08 95       	ret

0000026e <__divmodhi4_neg1>:
 26e:	f6 f7       	brtc	.-4      	; 0x26c <__divmodhi4_exit>
 270:	90 95       	com	r25
 272:	81 95       	neg	r24
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	08 95       	ret

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
