
LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000009cc  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006e  0080006e  00000a6e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e2  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005da  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002fc  00000000  00000000  0000116a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006be  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ac  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000260  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
char m[2];
char h[2];


int main()
{
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	lcd_init(LCD_DISP_ON);
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_init>
	lcd_puts("00:00:00");
  ac:	80 e6       	ldi	r24, 0x60	; 96
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_puts>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	24 ef       	ldi	r18, 0xF4	; 244
  b6:	a2 2e       	mov	r10, r18
  b8:	2e e7       	ldi	r18, 0x7E	; 126
  ba:	b2 2e       	mov	r11, r18

	// printing seconds
		lcd_gotoxy(6,0);
		//iota(sec,s,2);
		//lcd_puts((char*)sec);
		sprintf(s,"%2d",sec);
  bc:	94 e7       	ldi	r25, 0x74	; 116
  be:	c9 2e       	mov	r12, r25
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	d9 2e       	mov	r13, r25
  c4:	c9 e6       	ldi	r28, 0x69	; 105
  c6:	d0 e0       	ldi	r29, 0x00	; 0


	// printing minutes
		lcd_gotoxy(3,0);
		//iota(min,m,2);
		sprintf(m,"%2d",min);
  c8:	88 e7       	ldi	r24, 0x78	; 120
  ca:	e8 2e       	mov	r14, r24
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	f8 2e       	mov	r15, r24


		// printing hours
		lcd_gotoxy(0,0);
		//iota(hr,h,2);
		sprintf(h,"%2d",hr);
  d0:	06 e7       	ldi	r16, 0x76	; 118
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	c5 01       	movw	r24, r10
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x44>
	while(1)
	{

		_delay_ms(130);

		sec++;
  da:	80 91 6e 00 	lds	r24, 0x006E
  de:	90 91 6f 00 	lds	r25, 0x006F
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 6f 00 	sts	0x006F, r25
  e8:	80 93 6e 00 	sts	0x006E, r24

	// printing seconds
		lcd_gotoxy(6,0);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_gotoxy>
		//iota(sec,s,2);
		//lcd_puts((char*)sec);
		sprintf(s,"%2d",sec);
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x64>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0x66>
  f8:	00 d0       	rcall	.+0      	; 0xfa <main+0x68>
  fa:	ed b7       	in	r30, 0x3d	; 61
  fc:	fe b7       	in	r31, 0x3e	; 62
  fe:	31 96       	adiw	r30, 0x01	; 1
 100:	ad b7       	in	r26, 0x3d	; 61
 102:	be b7       	in	r27, 0x3e	; 62
 104:	12 96       	adiw	r26, 0x02	; 2
 106:	dc 92       	st	X, r13
 108:	ce 92       	st	-X, r12
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	d3 83       	std	Z+3, r29	; 0x03
 10e:	c2 83       	std	Z+2, r28	; 0x02
 110:	80 91 6e 00 	lds	r24, 0x006E
 114:	90 91 6f 00 	lds	r25, 0x006F
 118:	95 83       	std	Z+5, r25	; 0x05
 11a:	84 83       	std	Z+4, r24	; 0x04
 11c:	0e 94 0c 02 	call	0x418	; 0x418 <sprintf>
		lcd_puts(s);
 120:	8d b7       	in	r24, 0x3d	; 61
 122:	9e b7       	in	r25, 0x3e	; 62
 124:	06 96       	adiw	r24, 0x06	; 6
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	9e bf       	out	0x3e, r25	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	8d bf       	out	0x3d, r24	; 61
 130:	c6 01       	movw	r24, r12
 132:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_puts>

		if(sec>=59)
 136:	80 91 6e 00 	lds	r24, 0x006E
 13a:	90 91 6f 00 	lds	r25, 0x006F
 13e:	cb 97       	sbiw	r24, 0x3b	; 59
 140:	6c f0       	brlt	.+26     	; 0x15c <main+0xca>
		{
			sec=0;
 142:	10 92 6f 00 	sts	0x006F, r1
 146:	10 92 6e 00 	sts	0x006E, r1
			min++;
 14a:	80 91 70 00 	lds	r24, 0x0070
 14e:	90 91 71 00 	lds	r25, 0x0071
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 71 00 	sts	0x0071, r25
 158:	80 93 70 00 	sts	0x0070, r24
		}


	// printing minutes
		lcd_gotoxy(3,0);
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_gotoxy>
		//iota(min,m,2);
		sprintf(m,"%2d",min);
 164:	00 d0       	rcall	.+0      	; 0x166 <main+0xd4>
 166:	00 d0       	rcall	.+0      	; 0x168 <main+0xd6>
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0xd8>
 16a:	ed b7       	in	r30, 0x3d	; 61
 16c:	fe b7       	in	r31, 0x3e	; 62
 16e:	31 96       	adiw	r30, 0x01	; 1
 170:	ad b7       	in	r26, 0x3d	; 61
 172:	be b7       	in	r27, 0x3e	; 62
 174:	12 96       	adiw	r26, 0x02	; 2
 176:	fc 92       	st	X, r15
 178:	ee 92       	st	-X, r14
 17a:	11 97       	sbiw	r26, 0x01	; 1
 17c:	d3 83       	std	Z+3, r29	; 0x03
 17e:	c2 83       	std	Z+2, r28	; 0x02
 180:	80 91 70 00 	lds	r24, 0x0070
 184:	90 91 71 00 	lds	r25, 0x0071
 188:	95 83       	std	Z+5, r25	; 0x05
 18a:	84 83       	std	Z+4, r24	; 0x04
 18c:	0e 94 0c 02 	call	0x418	; 0x418 <sprintf>
		lcd_puts(m);
 190:	8d b7       	in	r24, 0x3d	; 61
 192:	9e b7       	in	r25, 0x3e	; 62
 194:	06 96       	adiw	r24, 0x06	; 6
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	9e bf       	out	0x3e, r25	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	8d bf       	out	0x3d, r24	; 61
 1a0:	c7 01       	movw	r24, r14
 1a2:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_puts>
		

		if(min>=59)
 1a6:	80 91 70 00 	lds	r24, 0x0070
 1aa:	90 91 71 00 	lds	r25, 0x0071
 1ae:	cb 97       	sbiw	r24, 0x3b	; 59
 1b0:	6c f0       	brlt	.+26     	; 0x1cc <main+0x13a>
		{
			min=0;
 1b2:	10 92 71 00 	sts	0x0071, r1
 1b6:	10 92 70 00 	sts	0x0070, r1
			hr++;
 1ba:	80 91 72 00 	lds	r24, 0x0072
 1be:	90 91 73 00 	lds	r25, 0x0073
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 73 00 	sts	0x0073, r25
 1c8:	80 93 72 00 	sts	0x0072, r24
		}


		// printing hours
		lcd_gotoxy(0,0);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_gotoxy>
		//iota(hr,h,2);
		sprintf(h,"%2d",hr);
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <main+0x144>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0x146>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <main+0x148>
 1da:	ed b7       	in	r30, 0x3d	; 61
 1dc:	fe b7       	in	r31, 0x3e	; 62
 1de:	31 96       	adiw	r30, 0x01	; 1
 1e0:	ad b7       	in	r26, 0x3d	; 61
 1e2:	be b7       	in	r27, 0x3e	; 62
 1e4:	12 96       	adiw	r26, 0x02	; 2
 1e6:	1c 93       	st	X, r17
 1e8:	0e 93       	st	-X, r16
 1ea:	11 97       	sbiw	r26, 0x01	; 1
 1ec:	d3 83       	std	Z+3, r29	; 0x03
 1ee:	c2 83       	std	Z+2, r28	; 0x02
 1f0:	80 91 72 00 	lds	r24, 0x0072
 1f4:	90 91 73 00 	lds	r25, 0x0073
 1f8:	95 83       	std	Z+5, r25	; 0x05
 1fa:	84 83       	std	Z+4, r24	; 0x04
 1fc:	0e 94 0c 02 	call	0x418	; 0x418 <sprintf>
		lcd_puts(h);
 200:	8d b7       	in	r24, 0x3d	; 61
 202:	9e b7       	in	r25, 0x3e	; 62
 204:	06 96       	adiw	r24, 0x06	; 6
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	9e bf       	out	0x3e, r25	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	8d bf       	out	0x3d, r24	; 61
 210:	c8 01       	movw	r24, r16
 212:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_puts>

		if(hr>=59)
 216:	80 91 72 00 	lds	r24, 0x0072
 21a:	90 91 73 00 	lds	r25, 0x0073
 21e:	cb 97       	sbiw	r24, 0x3b	; 59
 220:	0c f4       	brge	.+2      	; 0x224 <main+0x192>
 222:	58 cf       	rjmp	.-336    	; 0xd4 <main+0x42>
		{
			min=0;
 224:	10 92 71 00 	sts	0x0071, r1
 228:	10 92 70 00 	sts	0x0070, r1
			hr=0;
 22c:	10 92 73 00 	sts	0x0073, r1
 230:	10 92 72 00 	sts	0x0072, r1
			sec=0;
 234:	10 92 6f 00 	sts	0x006F, r1
 238:	10 92 6e 00 	sts	0x006E, r1
 23c:	4b cf       	rjmp	.-362    	; 0xd4 <main+0x42>

0000023e <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 23e:	66 23       	and	r22, r22
 240:	11 f0       	breq	.+4      	; 0x246 <lcd_write+0x8>
       lcd_rs_high();
 242:	c0 9a       	sbi	0x18, 0	; 24
 244:	01 c0       	rjmp	.+2      	; 0x248 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 246:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 248:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 24a:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 24c:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 24e:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 250:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 252:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 254:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 256:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 258:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 25a:	87 fd       	sbrc	r24, 7
 25c:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 25e:	86 fd       	sbrc	r24, 6
 260:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 262:	85 fd       	sbrc	r24, 5
 264:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 266:	84 fd       	sbrc	r24, 4
 268:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 26a:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_write+0x30>
    lcd_e_low();
 26e:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 270:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 272:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 274:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 276:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 278:	83 fd       	sbrc	r24, 3
 27a:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 27c:	82 fd       	sbrc	r24, 2
 27e:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 280:	81 fd       	sbrc	r24, 1
 282:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 284:	80 fd       	sbrc	r24, 0
 286:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 288:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_write+0x4e>
    lcd_e_low();
 28c:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 28e:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 290:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 292:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 294:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 296:	08 95       	ret

00000298 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 298:	88 23       	and	r24, r24
 29a:	11 f0       	breq	.+4      	; 0x2a0 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 29c:	c0 9a       	sbi	0x18, 0	; 24
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 2a0:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 2a2:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 2a4:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 2a6:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 2a8:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 2aa:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 2ac:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 2b0:	b4 9b       	sbis	0x16, 4	; 22
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <lcd_read+0x20>
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <lcd_read+0x22>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 2ba:	b5 99       	sbic	0x16, 5	; 22
 2bc:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 2be:	b6 99       	sbic	0x16, 6	; 22
 2c0:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 2c2:	b7 99       	sbic	0x16, 7	; 22
 2c4:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 2c6:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 2ca:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 2ce:	b4 99       	sbic	0x16, 4	; 22
 2d0:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 2d2:	b5 99       	sbic	0x16, 5	; 22
 2d4:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 2d6:	b6 99       	sbic	0x16, 6	; 22
 2d8:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 2da:	b7 99       	sbic	0x16, 7	; 22
 2dc:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 2de:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
 2e0:	08 95       	ret

000002e2 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_read>
 2e8:	87 fd       	sbrc	r24, 7
 2ea:	fb cf       	rjmp	.-10     	; 0x2e2 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_read>
    
}/* lcd_waitbusy */
 2f4:	08 95       	ret

000002f6 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 2f6:	1f 93       	push	r17
 2f8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2fa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_waitbusy>
    lcd_write(cmd,0);
 2fe:	81 2f       	mov	r24, r17
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_write>
}
 306:	1f 91       	pop	r17
 308:	08 95       	ret

0000030a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 30a:	1f 93       	push	r17
 30c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 30e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_waitbusy>
    lcd_write(data,1);
 312:	81 2f       	mov	r24, r17
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_write>
}
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 31e:	66 23       	and	r22, r22
 320:	11 f4       	brne	.+4      	; 0x326 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 322:	80 58       	subi	r24, 0x80	; 128
 324:	01 c0       	rjmp	.+2      	; 0x328 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 326:	80 54       	subi	r24, 0x40	; 64
 328:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>
 32c:	08 95       	ret

0000032e <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 32e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_waitbusy>
}
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret

00000336 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>
}
 33c:	08 95       	ret

0000033e <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>
}
 344:	08 95       	ret

00000346 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 346:	1f 93       	push	r17
 348:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 34a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_waitbusy>
    if (c=='\n')
 34e:	1a 30       	cpi	r17, 0x0A	; 10
 350:	49 f4       	brne	.+18     	; 0x364 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 352:	80 34       	cpi	r24, 0x40	; 64
 354:	10 f0       	brcs	.+4      	; 0x35a <lcd_putc+0x14>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	01 c0       	rjmp	.+2      	; 0x35c <lcd_putc+0x16>
 35a:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 35c:	80 58       	subi	r24, 0x80	; 128
 35e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>
 362:	04 c0       	rjmp	.+8      	; 0x36c <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 364:	81 2f       	mov	r24, r17
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_write>
    }

}/* lcd_putc */
 36c:	1f 91       	pop	r17
 36e:	08 95       	ret

00000370 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
 376:	02 c0       	rjmp	.+4      	; 0x37c <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 378:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 37c:	89 91       	ld	r24, Y+
 37e:	88 23       	and	r24, r24
 380:	d9 f7       	brne	.-10     	; 0x378 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 390:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_putc>
 394:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	84 91       	lpm	r24, Z+
 39a:	88 23       	and	r24, r24
 39c:	c9 f7       	brne	.-14     	; 0x390 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3a4:	1f 93       	push	r17
 3a6:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3a8:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 3aa:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3ac:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3ae:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3b0:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3b2:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 3b4:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3b6:	80 ea       	ldi	r24, 0xA0	; 160
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 3be:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 3c0:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3c2:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_init+0x22>
    lcd_e_low();
 3c6:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3c8:	80 ee       	ldi	r24, 0xE0	; 224
 3ca:	94 e0       	ldi	r25, 0x04	; 4
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3d0:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <lcd_init+0x30>
    lcd_e_low();
 3d4:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3d6:	80 e1       	ldi	r24, 0x10	; 16
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3e0:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_init+0x40>
    lcd_e_low();
 3e4:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3e6:	fc 01       	movw	r30, r24
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3ec:	c4 98       	cbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3ee:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_init+0x4e>
    lcd_e_low();
 3f2:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3f8:	88 e2       	ldi	r24, 0x28	; 40
 3fa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3fe:	88 e0       	ldi	r24, 0x08	; 8
 400:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 404:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 408:	86 e0       	ldi	r24, 0x06	; 6
 40a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 40e:	81 2f       	mov	r24, r17
 410:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_command>

}/* lcd_init */
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <sprintf>:
 418:	ae e0       	ldi	r26, 0x0E	; 14
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e2 e1       	ldi	r30, 0x12	; 18
 41e:	f2 e0       	ldi	r31, 0x02	; 2
 420:	0c 94 bb 04 	jmp	0x976	; 0x976 <__prologue_saves__+0x1c>
 424:	0d 89       	ldd	r16, Y+21	; 0x15
 426:	1e 89       	ldd	r17, Y+22	; 0x16
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	8c 83       	std	Y+4, r24	; 0x04
 42c:	1a 83       	std	Y+2, r17	; 0x02
 42e:	09 83       	std	Y+1, r16	; 0x01
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	9f e7       	ldi	r25, 0x7F	; 127
 434:	9e 83       	std	Y+6, r25	; 0x06
 436:	8d 83       	std	Y+5, r24	; 0x05
 438:	9e 01       	movw	r18, r28
 43a:	27 5e       	subi	r18, 0xE7	; 231
 43c:	3f 4f       	sbci	r19, 0xFF	; 255
 43e:	ce 01       	movw	r24, r28
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	6f 89       	ldd	r22, Y+23	; 0x17
 444:	78 8d       	ldd	r23, Y+24	; 0x18
 446:	a9 01       	movw	r20, r18
 448:	0e 94 30 02 	call	0x460	; 0x460 <vfprintf>
 44c:	2f 81       	ldd	r18, Y+7	; 0x07
 44e:	38 85       	ldd	r19, Y+8	; 0x08
 450:	02 0f       	add	r16, r18
 452:	13 1f       	adc	r17, r19
 454:	f8 01       	movw	r30, r16
 456:	10 82       	st	Z, r1
 458:	2e 96       	adiw	r28, 0x0e	; 14
 45a:	e4 e0       	ldi	r30, 0x04	; 4
 45c:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__epilogue_restores__+0x1c>

00000460 <vfprintf>:
 460:	ab e0       	ldi	r26, 0x0B	; 11
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e6 e3       	ldi	r30, 0x36	; 54
 466:	f2 e0       	ldi	r31, 0x02	; 2
 468:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__prologue_saves__>
 46c:	3c 01       	movw	r6, r24
 46e:	2b 01       	movw	r4, r22
 470:	5a 01       	movw	r10, r20
 472:	fc 01       	movw	r30, r24
 474:	17 82       	std	Z+7, r1	; 0x07
 476:	16 82       	std	Z+6, r1	; 0x06
 478:	83 81       	ldd	r24, Z+3	; 0x03
 47a:	81 fd       	sbrc	r24, 1
 47c:	03 c0       	rjmp	.+6      	; 0x484 <vfprintf+0x24>
 47e:	6f ef       	ldi	r22, 0xFF	; 255
 480:	7f ef       	ldi	r23, 0xFF	; 255
 482:	c6 c1       	rjmp	.+908    	; 0x810 <vfprintf+0x3b0>
 484:	9a e0       	ldi	r25, 0x0A	; 10
 486:	89 2e       	mov	r8, r25
 488:	1e 01       	movw	r2, r28
 48a:	08 94       	sec
 48c:	21 1c       	adc	r2, r1
 48e:	31 1c       	adc	r3, r1
 490:	f3 01       	movw	r30, r6
 492:	23 81       	ldd	r18, Z+3	; 0x03
 494:	f2 01       	movw	r30, r4
 496:	23 fd       	sbrc	r18, 3
 498:	85 91       	lpm	r24, Z+
 49a:	23 ff       	sbrs	r18, 3
 49c:	81 91       	ld	r24, Z+
 49e:	2f 01       	movw	r4, r30
 4a0:	88 23       	and	r24, r24
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <vfprintf+0x46>
 4a4:	b2 c1       	rjmp	.+868    	; 0x80a <vfprintf+0x3aa>
 4a6:	85 32       	cpi	r24, 0x25	; 37
 4a8:	39 f4       	brne	.+14     	; 0x4b8 <vfprintf+0x58>
 4aa:	23 fd       	sbrc	r18, 3
 4ac:	85 91       	lpm	r24, Z+
 4ae:	23 ff       	sbrs	r18, 3
 4b0:	81 91       	ld	r24, Z+
 4b2:	2f 01       	movw	r4, r30
 4b4:	85 32       	cpi	r24, 0x25	; 37
 4b6:	29 f4       	brne	.+10     	; 0x4c2 <vfprintf+0x62>
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	b3 01       	movw	r22, r6
 4bc:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 4c0:	e7 cf       	rjmp	.-50     	; 0x490 <vfprintf+0x30>
 4c2:	98 2f       	mov	r25, r24
 4c4:	ff 24       	eor	r15, r15
 4c6:	ee 24       	eor	r14, r14
 4c8:	99 24       	eor	r9, r9
 4ca:	ff e1       	ldi	r31, 0x1F	; 31
 4cc:	ff 15       	cp	r31, r15
 4ce:	d0 f0       	brcs	.+52     	; 0x504 <vfprintf+0xa4>
 4d0:	9b 32       	cpi	r25, 0x2B	; 43
 4d2:	69 f0       	breq	.+26     	; 0x4ee <vfprintf+0x8e>
 4d4:	9c 32       	cpi	r25, 0x2C	; 44
 4d6:	28 f4       	brcc	.+10     	; 0x4e2 <vfprintf+0x82>
 4d8:	90 32       	cpi	r25, 0x20	; 32
 4da:	59 f0       	breq	.+22     	; 0x4f2 <vfprintf+0x92>
 4dc:	93 32       	cpi	r25, 0x23	; 35
 4de:	91 f4       	brne	.+36     	; 0x504 <vfprintf+0xa4>
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <vfprintf+0x9e>
 4e2:	9d 32       	cpi	r25, 0x2D	; 45
 4e4:	49 f0       	breq	.+18     	; 0x4f8 <vfprintf+0x98>
 4e6:	90 33       	cpi	r25, 0x30	; 48
 4e8:	69 f4       	brne	.+26     	; 0x504 <vfprintf+0xa4>
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	24 c0       	rjmp	.+72     	; 0x536 <vfprintf+0xd6>
 4ee:	52 e0       	ldi	r21, 0x02	; 2
 4f0:	f5 2a       	or	r15, r21
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	f8 2a       	or	r15, r24
 4f6:	28 c0       	rjmp	.+80     	; 0x548 <vfprintf+0xe8>
 4f8:	98 e0       	ldi	r25, 0x08	; 8
 4fa:	f9 2a       	or	r15, r25
 4fc:	25 c0       	rjmp	.+74     	; 0x548 <vfprintf+0xe8>
 4fe:	e0 e1       	ldi	r30, 0x10	; 16
 500:	fe 2a       	or	r15, r30
 502:	22 c0       	rjmp	.+68     	; 0x548 <vfprintf+0xe8>
 504:	f7 fc       	sbrc	r15, 7
 506:	29 c0       	rjmp	.+82     	; 0x55a <vfprintf+0xfa>
 508:	89 2f       	mov	r24, r25
 50a:	80 53       	subi	r24, 0x30	; 48
 50c:	8a 30       	cpi	r24, 0x0A	; 10
 50e:	70 f4       	brcc	.+28     	; 0x52c <vfprintf+0xcc>
 510:	f6 fe       	sbrs	r15, 6
 512:	05 c0       	rjmp	.+10     	; 0x51e <vfprintf+0xbe>
 514:	98 9c       	mul	r9, r8
 516:	90 2c       	mov	r9, r0
 518:	11 24       	eor	r1, r1
 51a:	98 0e       	add	r9, r24
 51c:	15 c0       	rjmp	.+42     	; 0x548 <vfprintf+0xe8>
 51e:	e8 9c       	mul	r14, r8
 520:	e0 2c       	mov	r14, r0
 522:	11 24       	eor	r1, r1
 524:	e8 0e       	add	r14, r24
 526:	f0 e2       	ldi	r31, 0x20	; 32
 528:	ff 2a       	or	r15, r31
 52a:	0e c0       	rjmp	.+28     	; 0x548 <vfprintf+0xe8>
 52c:	9e 32       	cpi	r25, 0x2E	; 46
 52e:	29 f4       	brne	.+10     	; 0x53a <vfprintf+0xda>
 530:	f6 fc       	sbrc	r15, 6
 532:	6b c1       	rjmp	.+726    	; 0x80a <vfprintf+0x3aa>
 534:	40 e4       	ldi	r20, 0x40	; 64
 536:	f4 2a       	or	r15, r20
 538:	07 c0       	rjmp	.+14     	; 0x548 <vfprintf+0xe8>
 53a:	9c 36       	cpi	r25, 0x6C	; 108
 53c:	19 f4       	brne	.+6      	; 0x544 <vfprintf+0xe4>
 53e:	50 e8       	ldi	r21, 0x80	; 128
 540:	f5 2a       	or	r15, r21
 542:	02 c0       	rjmp	.+4      	; 0x548 <vfprintf+0xe8>
 544:	98 36       	cpi	r25, 0x68	; 104
 546:	49 f4       	brne	.+18     	; 0x55a <vfprintf+0xfa>
 548:	f2 01       	movw	r30, r4
 54a:	23 fd       	sbrc	r18, 3
 54c:	95 91       	lpm	r25, Z+
 54e:	23 ff       	sbrs	r18, 3
 550:	91 91       	ld	r25, Z+
 552:	2f 01       	movw	r4, r30
 554:	99 23       	and	r25, r25
 556:	09 f0       	breq	.+2      	; 0x55a <vfprintf+0xfa>
 558:	b8 cf       	rjmp	.-144    	; 0x4ca <vfprintf+0x6a>
 55a:	89 2f       	mov	r24, r25
 55c:	85 54       	subi	r24, 0x45	; 69
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	18 f0       	brcs	.+6      	; 0x568 <vfprintf+0x108>
 562:	80 52       	subi	r24, 0x20	; 32
 564:	83 30       	cpi	r24, 0x03	; 3
 566:	38 f4       	brcc	.+14     	; 0x576 <vfprintf+0x116>
 568:	44 e0       	ldi	r20, 0x04	; 4
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	a4 0e       	add	r10, r20
 56e:	b5 1e       	adc	r11, r21
 570:	5f e3       	ldi	r21, 0x3F	; 63
 572:	59 83       	std	Y+1, r21	; 0x01
 574:	0f c0       	rjmp	.+30     	; 0x594 <vfprintf+0x134>
 576:	93 36       	cpi	r25, 0x63	; 99
 578:	31 f0       	breq	.+12     	; 0x586 <vfprintf+0x126>
 57a:	93 37       	cpi	r25, 0x73	; 115
 57c:	79 f0       	breq	.+30     	; 0x59c <vfprintf+0x13c>
 57e:	93 35       	cpi	r25, 0x53	; 83
 580:	09 f0       	breq	.+2      	; 0x584 <vfprintf+0x124>
 582:	56 c0       	rjmp	.+172    	; 0x630 <vfprintf+0x1d0>
 584:	20 c0       	rjmp	.+64     	; 0x5c6 <vfprintf+0x166>
 586:	f5 01       	movw	r30, r10
 588:	80 81       	ld	r24, Z
 58a:	89 83       	std	Y+1, r24	; 0x01
 58c:	42 e0       	ldi	r20, 0x02	; 2
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	a4 0e       	add	r10, r20
 592:	b5 1e       	adc	r11, r21
 594:	61 01       	movw	r12, r2
 596:	01 e0       	ldi	r16, 0x01	; 1
 598:	10 e0       	ldi	r17, 0x00	; 0
 59a:	12 c0       	rjmp	.+36     	; 0x5c0 <vfprintf+0x160>
 59c:	f5 01       	movw	r30, r10
 59e:	c0 80       	ld	r12, Z
 5a0:	d1 80       	ldd	r13, Z+1	; 0x01
 5a2:	f6 fc       	sbrc	r15, 6
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <vfprintf+0x14c>
 5a6:	6f ef       	ldi	r22, 0xFF	; 255
 5a8:	7f ef       	ldi	r23, 0xFF	; 255
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <vfprintf+0x150>
 5ac:	69 2d       	mov	r22, r9
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	42 e0       	ldi	r20, 0x02	; 2
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	a4 0e       	add	r10, r20
 5b6:	b5 1e       	adc	r11, r21
 5b8:	c6 01       	movw	r24, r12
 5ba:	0e 94 18 04 	call	0x830	; 0x830 <strnlen>
 5be:	8c 01       	movw	r16, r24
 5c0:	5f e7       	ldi	r21, 0x7F	; 127
 5c2:	f5 22       	and	r15, r21
 5c4:	14 c0       	rjmp	.+40     	; 0x5ee <vfprintf+0x18e>
 5c6:	f5 01       	movw	r30, r10
 5c8:	c0 80       	ld	r12, Z
 5ca:	d1 80       	ldd	r13, Z+1	; 0x01
 5cc:	f6 fc       	sbrc	r15, 6
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <vfprintf+0x176>
 5d0:	6f ef       	ldi	r22, 0xFF	; 255
 5d2:	7f ef       	ldi	r23, 0xFF	; 255
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0x17a>
 5d6:	69 2d       	mov	r22, r9
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	42 e0       	ldi	r20, 0x02	; 2
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	a4 0e       	add	r10, r20
 5e0:	b5 1e       	adc	r11, r21
 5e2:	c6 01       	movw	r24, r12
 5e4:	0e 94 0d 04 	call	0x81a	; 0x81a <strnlen_P>
 5e8:	8c 01       	movw	r16, r24
 5ea:	50 e8       	ldi	r21, 0x80	; 128
 5ec:	f5 2a       	or	r15, r21
 5ee:	f3 fe       	sbrs	r15, 3
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <vfprintf+0x1a0>
 5f2:	1a c0       	rjmp	.+52     	; 0x628 <vfprintf+0x1c8>
 5f4:	80 e2       	ldi	r24, 0x20	; 32
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	b3 01       	movw	r22, r6
 5fa:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 5fe:	ea 94       	dec	r14
 600:	8e 2d       	mov	r24, r14
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	08 17       	cp	r16, r24
 606:	19 07       	cpc	r17, r25
 608:	a8 f3       	brcs	.-22     	; 0x5f4 <vfprintf+0x194>
 60a:	0e c0       	rjmp	.+28     	; 0x628 <vfprintf+0x1c8>
 60c:	f6 01       	movw	r30, r12
 60e:	f7 fc       	sbrc	r15, 7
 610:	85 91       	lpm	r24, Z+
 612:	f7 fe       	sbrs	r15, 7
 614:	81 91       	ld	r24, Z+
 616:	6f 01       	movw	r12, r30
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	b3 01       	movw	r22, r6
 61c:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 620:	e1 10       	cpse	r14, r1
 622:	ea 94       	dec	r14
 624:	01 50       	subi	r16, 0x01	; 1
 626:	10 40       	sbci	r17, 0x00	; 0
 628:	01 15       	cp	r16, r1
 62a:	11 05       	cpc	r17, r1
 62c:	79 f7       	brne	.-34     	; 0x60c <vfprintf+0x1ac>
 62e:	ea c0       	rjmp	.+468    	; 0x804 <vfprintf+0x3a4>
 630:	94 36       	cpi	r25, 0x64	; 100
 632:	11 f0       	breq	.+4      	; 0x638 <vfprintf+0x1d8>
 634:	99 36       	cpi	r25, 0x69	; 105
 636:	69 f5       	brne	.+90     	; 0x692 <vfprintf+0x232>
 638:	f7 fe       	sbrs	r15, 7
 63a:	08 c0       	rjmp	.+16     	; 0x64c <vfprintf+0x1ec>
 63c:	f5 01       	movw	r30, r10
 63e:	20 81       	ld	r18, Z
 640:	31 81       	ldd	r19, Z+1	; 0x01
 642:	42 81       	ldd	r20, Z+2	; 0x02
 644:	53 81       	ldd	r21, Z+3	; 0x03
 646:	84 e0       	ldi	r24, 0x04	; 4
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0a c0       	rjmp	.+20     	; 0x660 <vfprintf+0x200>
 64c:	f5 01       	movw	r30, r10
 64e:	80 81       	ld	r24, Z
 650:	91 81       	ldd	r25, Z+1	; 0x01
 652:	9c 01       	movw	r18, r24
 654:	44 27       	eor	r20, r20
 656:	37 fd       	sbrc	r19, 7
 658:	40 95       	com	r20
 65a:	54 2f       	mov	r21, r20
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	a8 0e       	add	r10, r24
 662:	b9 1e       	adc	r11, r25
 664:	9f e6       	ldi	r25, 0x6F	; 111
 666:	f9 22       	and	r15, r25
 668:	57 ff       	sbrs	r21, 7
 66a:	09 c0       	rjmp	.+18     	; 0x67e <vfprintf+0x21e>
 66c:	50 95       	com	r21
 66e:	40 95       	com	r20
 670:	30 95       	com	r19
 672:	21 95       	neg	r18
 674:	3f 4f       	sbci	r19, 0xFF	; 255
 676:	4f 4f       	sbci	r20, 0xFF	; 255
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	e0 e8       	ldi	r30, 0x80	; 128
 67c:	fe 2a       	or	r15, r30
 67e:	ca 01       	movw	r24, r20
 680:	b9 01       	movw	r22, r18
 682:	a1 01       	movw	r20, r2
 684:	2a e0       	ldi	r18, 0x0A	; 10
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	0e 94 4f 04 	call	0x89e	; 0x89e <__ultoa_invert>
 68c:	d8 2e       	mov	r13, r24
 68e:	d2 18       	sub	r13, r2
 690:	40 c0       	rjmp	.+128    	; 0x712 <vfprintf+0x2b2>
 692:	95 37       	cpi	r25, 0x75	; 117
 694:	29 f4       	brne	.+10     	; 0x6a0 <vfprintf+0x240>
 696:	1f 2d       	mov	r17, r15
 698:	1f 7e       	andi	r17, 0xEF	; 239
 69a:	2a e0       	ldi	r18, 0x0A	; 10
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	1d c0       	rjmp	.+58     	; 0x6da <vfprintf+0x27a>
 6a0:	1f 2d       	mov	r17, r15
 6a2:	19 7f       	andi	r17, 0xF9	; 249
 6a4:	9f 36       	cpi	r25, 0x6F	; 111
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <vfprintf+0x260>
 6a8:	90 37       	cpi	r25, 0x70	; 112
 6aa:	20 f4       	brcc	.+8      	; 0x6b4 <vfprintf+0x254>
 6ac:	98 35       	cpi	r25, 0x58	; 88
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <vfprintf+0x252>
 6b0:	ac c0       	rjmp	.+344    	; 0x80a <vfprintf+0x3aa>
 6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <vfprintf+0x272>
 6b4:	90 37       	cpi	r25, 0x70	; 112
 6b6:	39 f0       	breq	.+14     	; 0x6c6 <vfprintf+0x266>
 6b8:	98 37       	cpi	r25, 0x78	; 120
 6ba:	09 f0       	breq	.+2      	; 0x6be <vfprintf+0x25e>
 6bc:	a6 c0       	rjmp	.+332    	; 0x80a <vfprintf+0x3aa>
 6be:	04 c0       	rjmp	.+8      	; 0x6c8 <vfprintf+0x268>
 6c0:	28 e0       	ldi	r18, 0x08	; 8
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	0a c0       	rjmp	.+20     	; 0x6da <vfprintf+0x27a>
 6c6:	10 61       	ori	r17, 0x10	; 16
 6c8:	14 fd       	sbrc	r17, 4
 6ca:	14 60       	ori	r17, 0x04	; 4
 6cc:	20 e1       	ldi	r18, 0x10	; 16
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <vfprintf+0x27a>
 6d2:	14 fd       	sbrc	r17, 4
 6d4:	16 60       	ori	r17, 0x06	; 6
 6d6:	20 e1       	ldi	r18, 0x10	; 16
 6d8:	32 e0       	ldi	r19, 0x02	; 2
 6da:	17 ff       	sbrs	r17, 7
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <vfprintf+0x28e>
 6de:	f5 01       	movw	r30, r10
 6e0:	60 81       	ld	r22, Z
 6e2:	71 81       	ldd	r23, Z+1	; 0x01
 6e4:	82 81       	ldd	r24, Z+2	; 0x02
 6e6:	93 81       	ldd	r25, Z+3	; 0x03
 6e8:	44 e0       	ldi	r20, 0x04	; 4
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	08 c0       	rjmp	.+16     	; 0x6fe <vfprintf+0x29e>
 6ee:	f5 01       	movw	r30, r10
 6f0:	80 81       	ld	r24, Z
 6f2:	91 81       	ldd	r25, Z+1	; 0x01
 6f4:	bc 01       	movw	r22, r24
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	42 e0       	ldi	r20, 0x02	; 2
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	a4 0e       	add	r10, r20
 700:	b5 1e       	adc	r11, r21
 702:	a1 01       	movw	r20, r2
 704:	0e 94 4f 04 	call	0x89e	; 0x89e <__ultoa_invert>
 708:	d8 2e       	mov	r13, r24
 70a:	d2 18       	sub	r13, r2
 70c:	8f e7       	ldi	r24, 0x7F	; 127
 70e:	f8 2e       	mov	r15, r24
 710:	f1 22       	and	r15, r17
 712:	f6 fe       	sbrs	r15, 6
 714:	0b c0       	rjmp	.+22     	; 0x72c <vfprintf+0x2cc>
 716:	5e ef       	ldi	r21, 0xFE	; 254
 718:	f5 22       	and	r15, r21
 71a:	d9 14       	cp	r13, r9
 71c:	38 f4       	brcc	.+14     	; 0x72c <vfprintf+0x2cc>
 71e:	f4 fe       	sbrs	r15, 4
 720:	07 c0       	rjmp	.+14     	; 0x730 <vfprintf+0x2d0>
 722:	f2 fc       	sbrc	r15, 2
 724:	05 c0       	rjmp	.+10     	; 0x730 <vfprintf+0x2d0>
 726:	8f ee       	ldi	r24, 0xEF	; 239
 728:	f8 22       	and	r15, r24
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0x2d0>
 72c:	1d 2d       	mov	r17, r13
 72e:	01 c0       	rjmp	.+2      	; 0x732 <vfprintf+0x2d2>
 730:	19 2d       	mov	r17, r9
 732:	f4 fe       	sbrs	r15, 4
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x2f0>
 736:	fe 01       	movw	r30, r28
 738:	ed 0d       	add	r30, r13
 73a:	f1 1d       	adc	r31, r1
 73c:	80 81       	ld	r24, Z
 73e:	80 33       	cpi	r24, 0x30	; 48
 740:	19 f4       	brne	.+6      	; 0x748 <vfprintf+0x2e8>
 742:	99 ee       	ldi	r25, 0xE9	; 233
 744:	f9 22       	and	r15, r25
 746:	08 c0       	rjmp	.+16     	; 0x758 <vfprintf+0x2f8>
 748:	1f 5f       	subi	r17, 0xFF	; 255
 74a:	f2 fe       	sbrs	r15, 2
 74c:	05 c0       	rjmp	.+10     	; 0x758 <vfprintf+0x2f8>
 74e:	03 c0       	rjmp	.+6      	; 0x756 <vfprintf+0x2f6>
 750:	8f 2d       	mov	r24, r15
 752:	86 78       	andi	r24, 0x86	; 134
 754:	09 f0       	breq	.+2      	; 0x758 <vfprintf+0x2f8>
 756:	1f 5f       	subi	r17, 0xFF	; 255
 758:	0f 2d       	mov	r16, r15
 75a:	f3 fc       	sbrc	r15, 3
 75c:	14 c0       	rjmp	.+40     	; 0x786 <vfprintf+0x326>
 75e:	f0 fe       	sbrs	r15, 0
 760:	0f c0       	rjmp	.+30     	; 0x780 <vfprintf+0x320>
 762:	1e 15       	cp	r17, r14
 764:	10 f0       	brcs	.+4      	; 0x76a <vfprintf+0x30a>
 766:	9d 2c       	mov	r9, r13
 768:	0b c0       	rjmp	.+22     	; 0x780 <vfprintf+0x320>
 76a:	9d 2c       	mov	r9, r13
 76c:	9e 0c       	add	r9, r14
 76e:	91 1a       	sub	r9, r17
 770:	1e 2d       	mov	r17, r14
 772:	06 c0       	rjmp	.+12     	; 0x780 <vfprintf+0x320>
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	b3 01       	movw	r22, r6
 77a:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 77e:	1f 5f       	subi	r17, 0xFF	; 255
 780:	1e 15       	cp	r17, r14
 782:	c0 f3       	brcs	.-16     	; 0x774 <vfprintf+0x314>
 784:	04 c0       	rjmp	.+8      	; 0x78e <vfprintf+0x32e>
 786:	1e 15       	cp	r17, r14
 788:	10 f4       	brcc	.+4      	; 0x78e <vfprintf+0x32e>
 78a:	e1 1a       	sub	r14, r17
 78c:	01 c0       	rjmp	.+2      	; 0x790 <vfprintf+0x330>
 78e:	ee 24       	eor	r14, r14
 790:	04 ff       	sbrs	r16, 4
 792:	0f c0       	rjmp	.+30     	; 0x7b2 <vfprintf+0x352>
 794:	80 e3       	ldi	r24, 0x30	; 48
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	b3 01       	movw	r22, r6
 79a:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 79e:	02 ff       	sbrs	r16, 2
 7a0:	1d c0       	rjmp	.+58     	; 0x7dc <vfprintf+0x37c>
 7a2:	01 fd       	sbrc	r16, 1
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <vfprintf+0x34c>
 7a6:	88 e7       	ldi	r24, 0x78	; 120
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <vfprintf+0x368>
 7ac:	88 e5       	ldi	r24, 0x58	; 88
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <vfprintf+0x368>
 7b2:	80 2f       	mov	r24, r16
 7b4:	86 78       	andi	r24, 0x86	; 134
 7b6:	91 f0       	breq	.+36     	; 0x7dc <vfprintf+0x37c>
 7b8:	01 ff       	sbrs	r16, 1
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <vfprintf+0x360>
 7bc:	8b e2       	ldi	r24, 0x2B	; 43
 7be:	01 c0       	rjmp	.+2      	; 0x7c2 <vfprintf+0x362>
 7c0:	80 e2       	ldi	r24, 0x20	; 32
 7c2:	f7 fc       	sbrc	r15, 7
 7c4:	8d e2       	ldi	r24, 0x2D	; 45
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	b3 01       	movw	r22, r6
 7ca:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 7ce:	06 c0       	rjmp	.+12     	; 0x7dc <vfprintf+0x37c>
 7d0:	80 e3       	ldi	r24, 0x30	; 48
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	b3 01       	movw	r22, r6
 7d6:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 7da:	9a 94       	dec	r9
 7dc:	d9 14       	cp	r13, r9
 7de:	c0 f3       	brcs	.-16     	; 0x7d0 <vfprintf+0x370>
 7e0:	da 94       	dec	r13
 7e2:	f1 01       	movw	r30, r2
 7e4:	ed 0d       	add	r30, r13
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	b3 01       	movw	r22, r6
 7ee:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 7f2:	dd 20       	and	r13, r13
 7f4:	a9 f7       	brne	.-22     	; 0x7e0 <vfprintf+0x380>
 7f6:	06 c0       	rjmp	.+12     	; 0x804 <vfprintf+0x3a4>
 7f8:	80 e2       	ldi	r24, 0x20	; 32
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	b3 01       	movw	r22, r6
 7fe:	0e 94 23 04 	call	0x846	; 0x846 <fputc>
 802:	ea 94       	dec	r14
 804:	ee 20       	and	r14, r14
 806:	c1 f7       	brne	.-16     	; 0x7f8 <vfprintf+0x398>
 808:	43 ce       	rjmp	.-890    	; 0x490 <vfprintf+0x30>
 80a:	f3 01       	movw	r30, r6
 80c:	66 81       	ldd	r22, Z+6	; 0x06
 80e:	77 81       	ldd	r23, Z+7	; 0x07
 810:	cb 01       	movw	r24, r22
 812:	2b 96       	adiw	r28, 0x0b	; 11
 814:	e2 e1       	ldi	r30, 0x12	; 18
 816:	0c 94 c9 04 	jmp	0x992	; 0x992 <__epilogue_restores__>

0000081a <strnlen_P>:
 81a:	fc 01       	movw	r30, r24
 81c:	05 90       	lpm	r0, Z+
 81e:	61 50       	subi	r22, 0x01	; 1
 820:	70 40       	sbci	r23, 0x00	; 0
 822:	01 10       	cpse	r0, r1
 824:	d8 f7       	brcc	.-10     	; 0x81c <strnlen_P+0x2>
 826:	80 95       	com	r24
 828:	90 95       	com	r25
 82a:	8e 0f       	add	r24, r30
 82c:	9f 1f       	adc	r25, r31
 82e:	08 95       	ret

00000830 <strnlen>:
 830:	fc 01       	movw	r30, r24
 832:	61 50       	subi	r22, 0x01	; 1
 834:	70 40       	sbci	r23, 0x00	; 0
 836:	01 90       	ld	r0, Z+
 838:	01 10       	cpse	r0, r1
 83a:	d8 f7       	brcc	.-10     	; 0x832 <strnlen+0x2>
 83c:	80 95       	com	r24
 83e:	90 95       	com	r25
 840:	8e 0f       	add	r24, r30
 842:	9f 1f       	adc	r25, r31
 844:	08 95       	ret

00000846 <fputc>:
 846:	0f 93       	push	r16
 848:	1f 93       	push	r17
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	8c 01       	movw	r16, r24
 850:	eb 01       	movw	r28, r22
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	81 ff       	sbrs	r24, 1
 856:	1b c0       	rjmp	.+54     	; 0x88e <fputc+0x48>
 858:	82 ff       	sbrs	r24, 2
 85a:	0d c0       	rjmp	.+26     	; 0x876 <fputc+0x30>
 85c:	2e 81       	ldd	r18, Y+6	; 0x06
 85e:	3f 81       	ldd	r19, Y+7	; 0x07
 860:	8c 81       	ldd	r24, Y+4	; 0x04
 862:	9d 81       	ldd	r25, Y+5	; 0x05
 864:	28 17       	cp	r18, r24
 866:	39 07       	cpc	r19, r25
 868:	64 f4       	brge	.+24     	; 0x882 <fputc+0x3c>
 86a:	e8 81       	ld	r30, Y
 86c:	f9 81       	ldd	r31, Y+1	; 0x01
 86e:	01 93       	st	Z+, r16
 870:	f9 83       	std	Y+1, r31	; 0x01
 872:	e8 83       	st	Y, r30
 874:	06 c0       	rjmp	.+12     	; 0x882 <fputc+0x3c>
 876:	e8 85       	ldd	r30, Y+8	; 0x08
 878:	f9 85       	ldd	r31, Y+9	; 0x09
 87a:	80 2f       	mov	r24, r16
 87c:	09 95       	icall
 87e:	89 2b       	or	r24, r25
 880:	31 f4       	brne	.+12     	; 0x88e <fputc+0x48>
 882:	8e 81       	ldd	r24, Y+6	; 0x06
 884:	9f 81       	ldd	r25, Y+7	; 0x07
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	9f 83       	std	Y+7, r25	; 0x07
 88a:	8e 83       	std	Y+6, r24	; 0x06
 88c:	02 c0       	rjmp	.+4      	; 0x892 <fputc+0x4c>
 88e:	0f ef       	ldi	r16, 0xFF	; 255
 890:	1f ef       	ldi	r17, 0xFF	; 255
 892:	c8 01       	movw	r24, r16
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <__ultoa_invert>:
 89e:	fa 01       	movw	r30, r20
 8a0:	aa 27       	eor	r26, r26
 8a2:	28 30       	cpi	r18, 0x08	; 8
 8a4:	51 f1       	breq	.+84     	; 0x8fa <__ultoa_invert+0x5c>
 8a6:	20 31       	cpi	r18, 0x10	; 16
 8a8:	81 f1       	breq	.+96     	; 0x90a <__ultoa_invert+0x6c>
 8aa:	e8 94       	clt
 8ac:	6f 93       	push	r22
 8ae:	6e 7f       	andi	r22, 0xFE	; 254
 8b0:	6e 5f       	subi	r22, 0xFE	; 254
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	af 4f       	sbci	r26, 0xFF	; 255
 8ba:	b1 e0       	ldi	r27, 0x01	; 1
 8bc:	3e d0       	rcall	.+124    	; 0x93a <__ultoa_invert+0x9c>
 8be:	b4 e0       	ldi	r27, 0x04	; 4
 8c0:	3c d0       	rcall	.+120    	; 0x93a <__ultoa_invert+0x9c>
 8c2:	67 0f       	add	r22, r23
 8c4:	78 1f       	adc	r23, r24
 8c6:	89 1f       	adc	r24, r25
 8c8:	9a 1f       	adc	r25, r26
 8ca:	a1 1d       	adc	r26, r1
 8cc:	68 0f       	add	r22, r24
 8ce:	79 1f       	adc	r23, r25
 8d0:	8a 1f       	adc	r24, r26
 8d2:	91 1d       	adc	r25, r1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	6a 0f       	add	r22, r26
 8d8:	71 1d       	adc	r23, r1
 8da:	81 1d       	adc	r24, r1
 8dc:	91 1d       	adc	r25, r1
 8de:	a1 1d       	adc	r26, r1
 8e0:	20 d0       	rcall	.+64     	; 0x922 <__ultoa_invert+0x84>
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <__ultoa_invert+0x48>
 8e4:	68 94       	set
 8e6:	3f 91       	pop	r19
 8e8:	2a e0       	ldi	r18, 0x0A	; 10
 8ea:	26 9f       	mul	r18, r22
 8ec:	11 24       	eor	r1, r1
 8ee:	30 19       	sub	r19, r0
 8f0:	30 5d       	subi	r19, 0xD0	; 208
 8f2:	31 93       	st	Z+, r19
 8f4:	de f6       	brtc	.-74     	; 0x8ac <__ultoa_invert+0xe>
 8f6:	cf 01       	movw	r24, r30
 8f8:	08 95       	ret
 8fa:	46 2f       	mov	r20, r22
 8fc:	47 70       	andi	r20, 0x07	; 7
 8fe:	40 5d       	subi	r20, 0xD0	; 208
 900:	41 93       	st	Z+, r20
 902:	b3 e0       	ldi	r27, 0x03	; 3
 904:	0f d0       	rcall	.+30     	; 0x924 <__ultoa_invert+0x86>
 906:	c9 f7       	brne	.-14     	; 0x8fa <__ultoa_invert+0x5c>
 908:	f6 cf       	rjmp	.-20     	; 0x8f6 <__ultoa_invert+0x58>
 90a:	46 2f       	mov	r20, r22
 90c:	4f 70       	andi	r20, 0x0F	; 15
 90e:	40 5d       	subi	r20, 0xD0	; 208
 910:	4a 33       	cpi	r20, 0x3A	; 58
 912:	18 f0       	brcs	.+6      	; 0x91a <__ultoa_invert+0x7c>
 914:	49 5d       	subi	r20, 0xD9	; 217
 916:	31 fd       	sbrc	r19, 1
 918:	40 52       	subi	r20, 0x20	; 32
 91a:	41 93       	st	Z+, r20
 91c:	02 d0       	rcall	.+4      	; 0x922 <__ultoa_invert+0x84>
 91e:	a9 f7       	brne	.-22     	; 0x90a <__ultoa_invert+0x6c>
 920:	ea cf       	rjmp	.-44     	; 0x8f6 <__ultoa_invert+0x58>
 922:	b4 e0       	ldi	r27, 0x04	; 4
 924:	a6 95       	lsr	r26
 926:	97 95       	ror	r25
 928:	87 95       	ror	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	ba 95       	dec	r27
 930:	c9 f7       	brne	.-14     	; 0x924 <__ultoa_invert+0x86>
 932:	00 97       	sbiw	r24, 0x00	; 0
 934:	61 05       	cpc	r22, r1
 936:	71 05       	cpc	r23, r1
 938:	08 95       	ret
 93a:	9b 01       	movw	r18, r22
 93c:	ac 01       	movw	r20, r24
 93e:	0a 2e       	mov	r0, r26
 940:	06 94       	lsr	r0
 942:	57 95       	ror	r21
 944:	47 95       	ror	r20
 946:	37 95       	ror	r19
 948:	27 95       	ror	r18
 94a:	ba 95       	dec	r27
 94c:	c9 f7       	brne	.-14     	; 0x940 <__ultoa_invert+0xa2>
 94e:	62 0f       	add	r22, r18
 950:	73 1f       	adc	r23, r19
 952:	84 1f       	adc	r24, r20
 954:	95 1f       	adc	r25, r21
 956:	a0 1d       	adc	r26, r0
 958:	08 95       	ret

0000095a <__prologue_saves__>:
 95a:	2f 92       	push	r2
 95c:	3f 92       	push	r3
 95e:	4f 92       	push	r4
 960:	5f 92       	push	r5
 962:	6f 92       	push	r6
 964:	7f 92       	push	r7
 966:	8f 92       	push	r8
 968:	9f 92       	push	r9
 96a:	af 92       	push	r10
 96c:	bf 92       	push	r11
 96e:	cf 92       	push	r12
 970:	df 92       	push	r13
 972:	ef 92       	push	r14
 974:	ff 92       	push	r15
 976:	0f 93       	push	r16
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	ca 1b       	sub	r28, r26
 984:	db 0b       	sbc	r29, r27
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	09 94       	ijmp

00000992 <__epilogue_restores__>:
 992:	2a 88       	ldd	r2, Y+18	; 0x12
 994:	39 88       	ldd	r3, Y+17	; 0x11
 996:	48 88       	ldd	r4, Y+16	; 0x10
 998:	5f 84       	ldd	r5, Y+15	; 0x0f
 99a:	6e 84       	ldd	r6, Y+14	; 0x0e
 99c:	7d 84       	ldd	r7, Y+13	; 0x0d
 99e:	8c 84       	ldd	r8, Y+12	; 0x0c
 9a0:	9b 84       	ldd	r9, Y+11	; 0x0b
 9a2:	aa 84       	ldd	r10, Y+10	; 0x0a
 9a4:	b9 84       	ldd	r11, Y+9	; 0x09
 9a6:	c8 84       	ldd	r12, Y+8	; 0x08
 9a8:	df 80       	ldd	r13, Y+7	; 0x07
 9aa:	ee 80       	ldd	r14, Y+6	; 0x06
 9ac:	fd 80       	ldd	r15, Y+5	; 0x05
 9ae:	0c 81       	ldd	r16, Y+4	; 0x04
 9b0:	1b 81       	ldd	r17, Y+3	; 0x03
 9b2:	aa 81       	ldd	r26, Y+2	; 0x02
 9b4:	b9 81       	ldd	r27, Y+1	; 0x01
 9b6:	ce 0f       	add	r28, r30
 9b8:	d1 1d       	adc	r29, r1
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	ed 01       	movw	r28, r26
 9c6:	08 95       	ret

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>
