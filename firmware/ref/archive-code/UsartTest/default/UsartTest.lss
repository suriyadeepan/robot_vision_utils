
UsartTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000ec  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000005a1  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000316  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000644  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000130  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b0  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000278  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  8a:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USARTInit>:





   UBRRL = ubrr_value;
  92:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
  94:	90 bd       	out	0x20, r25	; 32
   UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  96:	80 b5       	in	r24, 0x20	; 32
  98:	86 68       	ori	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32


   UCSRB=(1<<RXEN)|(1<<TXEN);
  9c:	88 e1       	ldi	r24, 0x18	; 24
  9e:	8a b9       	out	0x0a, r24	; 10
   UCSRA|=(1<<RXC);
  a0:	5f 9a       	sbi	0x0b, 7	; 11


}
  a2:	08 95       	ret

000000a4 <USARTReadChar>:

unsigned char USARTReadChar()
{


   while(!(UCSRA & (1<<RXC)));
  a4:	5f 9b       	sbis	0x0b, 7	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <USARTReadChar>



   return UDR;
  a8:	8c b1       	in	r24, 0x0c	; 12
}
  aa:	08 95       	ret

000000ac <USARTWriteChar>:

void USARTWriteChar(unsigned char data)
{

   while(!(UCSRA & (1<<UDRE)));
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <USARTWriteChar>
 

   UDR=data;
  b0:	8c b9       	out	0x0c, r24	; 12
}
  b2:	08 95       	ret

000000b4 <main>:





   UBRRL = ubrr_value;
  b4:	87 e6       	ldi	r24, 0x67	; 103
  b6:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
  b8:	10 bc       	out	0x20, r1	; 32
   UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  ba:	80 b5       	in	r24, 0x20	; 32
  bc:	86 68       	ori	r24, 0x86	; 134
  be:	80 bd       	out	0x20, r24	; 32


   UCSRB=(1<<RXEN)|(1<<TXEN);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
   UCSRA|=(1<<RXC);
  c4:	5f 9a       	sbi	0x0b, 7	; 11

unsigned char USARTReadChar()
{


   while(!(UCSRA & (1<<RXC)));
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <main+0x12>



   return UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
}

void USARTWriteChar(unsigned char data)
{

   while(!(UCSRA & (1<<UDRE)));
  cc:	5d 9b       	sbis	0x0b, 5	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x18>
 

   UDR=data;
  d0:	8c b9       	out	0x0c, r24	; 12
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <main+0x12>

000000d4 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  d4:	66 23       	and	r22, r22
  d6:	11 f0       	breq	.+4      	; 0xdc <lcd_write+0x8>
       lcd_rs_high();
  d8:	c0 9a       	sbi	0x18, 0	; 24
  da:	01 c0       	rjmp	.+2      	; 0xde <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  dc:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
  de:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  e0:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  e2:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  e4:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  e6:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  e8:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ea:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ec:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ee:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  f0:	87 fd       	sbrc	r24, 7
  f2:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  f4:	86 fd       	sbrc	r24, 6
  f6:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  f8:	85 fd       	sbrc	r24, 5
  fa:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  fc:	84 fd       	sbrc	r24, 4
  fe:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 100:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_write+0x30>
    lcd_e_low();
 104:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 106:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 108:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 10a:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 10c:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 10e:	83 fd       	sbrc	r24, 3
 110:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 112:	82 fd       	sbrc	r24, 2
 114:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 116:	81 fd       	sbrc	r24, 1
 118:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 11a:	80 fd       	sbrc	r24, 0
 11c:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 11e:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_write+0x4e>
    lcd_e_low();
 122:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 124:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 126:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 128:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 12a:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 12c:	08 95       	ret

0000012e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 12e:	88 23       	and	r24, r24
 130:	11 f0       	breq	.+4      	; 0x136 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 132:	c0 9a       	sbi	0x18, 0	; 24
 134:	01 c0       	rjmp	.+2      	; 0x138 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 136:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 138:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 13a:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 13c:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 13e:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 140:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 142:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 146:	b4 9b       	sbis	0x16, 4	; 22
 148:	02 c0       	rjmp	.+4      	; 0x14e <lcd_read+0x20>
 14a:	80 e1       	ldi	r24, 0x10	; 16
 14c:	01 c0       	rjmp	.+2      	; 0x150 <lcd_read+0x22>
 14e:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 150:	b5 99       	sbic	0x16, 5	; 22
 152:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 154:	b6 99       	sbic	0x16, 6	; 22
 156:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 158:	b7 99       	sbic	0x16, 7	; 22
 15a:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 15c:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 160:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 164:	b4 99       	sbic	0x16, 4	; 22
 166:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 168:	b5 99       	sbic	0x16, 5	; 22
 16a:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 16c:	b6 99       	sbic	0x16, 6	; 22
 16e:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 170:	b7 99       	sbic	0x16, 7	; 22
 172:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 174:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
 176:	08 95       	ret

00000178 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_read>
 17e:	87 fd       	sbrc	r24, 7
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_read>
    
}/* lcd_waitbusy */
 18a:	08 95       	ret

0000018c <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 18c:	1f 93       	push	r17
 18e:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 190:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_waitbusy>
    lcd_write(cmd,0);
 194:	81 2f       	mov	r24, r17
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_write>
}
 19c:	1f 91       	pop	r17
 19e:	08 95       	ret

000001a0 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 1a0:	1f 93       	push	r17
 1a2:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1a4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_waitbusy>
    lcd_write(data,1);
 1a8:	81 2f       	mov	r24, r17
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_write>
}
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 1b4:	66 23       	and	r22, r22
 1b6:	11 f4       	brne	.+4      	; 0x1bc <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1b8:	80 58       	subi	r24, 0x80	; 128
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1bc:	80 54       	subi	r24, 0x40	; 64
 1be:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
 1c2:	08 95       	ret

000001c4 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 1c4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_waitbusy>
}
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret

000001cc <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
}
 1d2:	08 95       	ret

000001d4 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
}
 1da:	08 95       	ret

000001dc <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1dc:	1f 93       	push	r17
 1de:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1e0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_waitbusy>
    if (c=='\n')
 1e4:	1a 30       	cpi	r17, 0x0A	; 10
 1e6:	49 f4       	brne	.+18     	; 0x1fa <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1e8:	80 34       	cpi	r24, 0x40	; 64
 1ea:	10 f0       	brcs	.+4      	; 0x1f0 <lcd_putc+0x14>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <lcd_putc+0x16>
 1f0:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1f2:	80 58       	subi	r24, 0x80	; 128
 1f4:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1fa:	81 2f       	mov	r24, r17
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_write>
    }

}/* lcd_putc */
 202:	1f 91       	pop	r17
 204:	08 95       	ret

00000206 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
 20c:	02 c0       	rjmp	.+4      	; 0x212 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 20e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 212:	89 91       	ld	r24, Y+
 214:	88 23       	and	r24, r24
 216:	d9 f7       	brne	.-10     	; 0x20e <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ec 01       	movw	r28, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 226:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_putc>
 22a:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	84 91       	lpm	r24, Z+
 230:	88 23       	and	r24, r24
 232:	c9 f7       	brne	.-14     	; 0x226 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 23a:	1f 93       	push	r17
 23c:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 23e:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 240:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 242:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 244:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 246:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 248:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 24a:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24c:	80 ea       	ldi	r24, 0xA0	; 160
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 254:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 256:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 258:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_init+0x22>
    lcd_e_low();
 25c:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 25e:	80 ee       	ldi	r24, 0xE0	; 224
 260:	94 e0       	ldi	r25, 0x04	; 4
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 266:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_init+0x30>
    lcd_e_low();
 26a:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 276:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 278:	00 c0       	rjmp	.+0      	; 0x27a <lcd_init+0x40>
    lcd_e_low();
 27a:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 27c:	fc 01       	movw	r30, r24
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 282:	c4 98       	cbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 284:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_init+0x4e>
    lcd_e_low();
 288:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 29a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2a4:	81 2f       	mov	r24, r17
 2a6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>

}/* lcd_init */
 2aa:	1f 91       	pop	r17
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
