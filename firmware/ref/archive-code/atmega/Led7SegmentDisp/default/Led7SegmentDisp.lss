
Led7SegmentDisp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000124  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000bf  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000200  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c1  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  000006c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main()
{
  92:	bf 92       	push	r11
  94:	cf 92       	push	r12
  96:	df 92       	push	r13
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17


		DDRD=0xff;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	81 bb       	out	0x11, r24	; 17
		DDRB=0xff;
  a4:	87 bb       	out	0x17, r24	; 23

		int count;

		PORTB=0xff;
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
		{
		
		switch(count)
		{
			case 0:
			PORTD=0xfc;
  ac:	6c ef       	ldi	r22, 0xFC	; 252
  ae:	b6 2e       	mov	r11, r22
			case 3:
			PORTD=0xf2;
			break;

			case 4:
			PORTD=0b01100110;
  b0:	56 e6       	ldi	r21, 0x66	; 102
  b2:	c5 2e       	mov	r12, r21
			case 9:
			PORTD=0b11110110;
			break;

			default:
			PORTD=0x02;
  b4:	42 e0       	ldi	r20, 0x02	; 2
  b6:	d4 2e       	mov	r13, r20
			case 6:
			PORTD=0b10111110;
			break;

			case 7:
			PORTD=0b11100000;
  b8:	90 ee       	ldi	r25, 0xE0	; 224
  ba:	e9 2e       	mov	r14, r25
			break;


			case 8:
			PORTD=0b11111110;
  bc:	8e ef       	ldi	r24, 0xFE	; 254
  be:	f8 2e       	mov	r15, r24
			break;

			case 9:
			PORTD=0b11110110;
  c0:	06 ef       	ldi	r16, 0xF6	; 246
			case 4:
			PORTD=0b01100110;
			break;

			case 5:
			PORTD=0b10110110;
  c2:	16 eb       	ldi	r17, 0xB6	; 182
			break;

			case 6:
			PORTD=0b10111110;
  c4:	be eb       	ldi	r27, 0xBE	; 190
			case 0:
			PORTD=0xfc;
			break;

			case 1:
			PORTD=0b01100000;
  c6:	a0 e6       	ldi	r26, 0x60	; 96
			break;

			case 2:
			PORTD=0xda;
  c8:	7a ed       	ldi	r23, 0xDA	; 218
			break;


			case 3:
			PORTD=0xf2;
  ca:	62 ef       	ldi	r22, 0xF2	; 242
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	49 e1       	ldi	r20, 0x19	; 25
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	4c c0       	rjmp	.+152    	; 0x16a <main+0xd8>

	
		for(count=0;count<10;count++)
		{
		
		switch(count)
  d2:	24 30       	cpi	r18, 0x04	; 4
  d4:	31 05       	cpc	r19, r1
  d6:	a1 f1       	breq	.+104    	; 0x140 <main+0xae>
  d8:	25 30       	cpi	r18, 0x05	; 5
  da:	31 05       	cpc	r19, r1
  dc:	8c f4       	brge	.+34     	; 0x100 <main+0x6e>
  de:	21 30       	cpi	r18, 0x01	; 1
  e0:	31 05       	cpc	r19, r1
  e2:	31 f1       	breq	.+76     	; 0x130 <main+0x9e>
  e4:	22 30       	cpi	r18, 0x02	; 2
  e6:	31 05       	cpc	r19, r1
  e8:	24 f4       	brge	.+8      	; 0xf2 <main+0x60>
  ea:	21 15       	cp	r18, r1
  ec:	31 05       	cpc	r19, r1
  ee:	e1 f0       	breq	.+56     	; 0x128 <main+0x96>
  f0:	33 c0       	rjmp	.+102    	; 0x158 <main+0xc6>
  f2:	22 30       	cpi	r18, 0x02	; 2
  f4:	31 05       	cpc	r19, r1
  f6:	f1 f0       	breq	.+60     	; 0x134 <main+0xa2>
  f8:	23 30       	cpi	r18, 0x03	; 3
  fa:	31 05       	cpc	r19, r1
  fc:	69 f5       	brne	.+90     	; 0x158 <main+0xc6>
  fe:	1e c0       	rjmp	.+60     	; 0x13c <main+0xaa>
 100:	27 30       	cpi	r18, 0x07	; 7
 102:	31 05       	cpc	r19, r1
 104:	19 f1       	breq	.+70     	; 0x14c <main+0xba>
 106:	28 30       	cpi	r18, 0x08	; 8
 108:	31 05       	cpc	r19, r1
 10a:	3c f4       	brge	.+14     	; 0x11a <main+0x88>
 10c:	25 30       	cpi	r18, 0x05	; 5
 10e:	31 05       	cpc	r19, r1
 110:	c9 f0       	breq	.+50     	; 0x144 <main+0xb2>
 112:	26 30       	cpi	r18, 0x06	; 6
 114:	31 05       	cpc	r19, r1
 116:	01 f5       	brne	.+64     	; 0x158 <main+0xc6>
 118:	17 c0       	rjmp	.+46     	; 0x148 <main+0xb6>
 11a:	28 30       	cpi	r18, 0x08	; 8
 11c:	31 05       	cpc	r19, r1
 11e:	c1 f0       	breq	.+48     	; 0x150 <main+0xbe>
 120:	29 30       	cpi	r18, 0x09	; 9
 122:	31 05       	cpc	r19, r1
 124:	c9 f4       	brne	.+50     	; 0x158 <main+0xc6>
 126:	16 c0       	rjmp	.+44     	; 0x154 <main+0xc2>
		{
			case 0:
			PORTD=0xfc;
 128:	b2 ba       	out	0x12, r11	; 18
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	03 c0       	rjmp	.+6      	; 0x136 <main+0xa4>
			break;

			case 1:
			PORTD=0b01100000;
 130:	a2 bb       	out	0x12, r26	; 18
 132:	01 c0       	rjmp	.+2      	; 0x136 <main+0xa4>
			break;

			case 2:
			PORTD=0xda;
 134:	72 bb       	out	0x12, r23	; 18
 136:	88 e2       	ldi	r24, 0x28	; 40
 138:	93 e2       	ldi	r25, 0x23	; 35
 13a:	10 c0       	rjmp	.+32     	; 0x15c <main+0xca>
			break;


			case 3:
			PORTD=0xf2;
 13c:	62 bb       	out	0x12, r22	; 18
 13e:	fb cf       	rjmp	.-10     	; 0x136 <main+0xa4>
			break;

			case 4:
			PORTD=0b01100110;
 140:	c2 ba       	out	0x12, r12	; 18
 142:	f9 cf       	rjmp	.-14     	; 0x136 <main+0xa4>
			break;

			case 5:
			PORTD=0b10110110;
 144:	12 bb       	out	0x12, r17	; 18
 146:	f7 cf       	rjmp	.-18     	; 0x136 <main+0xa4>
			break;

			case 6:
			PORTD=0b10111110;
 148:	b2 bb       	out	0x12, r27	; 18
 14a:	f5 cf       	rjmp	.-22     	; 0x136 <main+0xa4>
			break;

			case 7:
			PORTD=0b11100000;
 14c:	e2 ba       	out	0x12, r14	; 18
 14e:	f3 cf       	rjmp	.-26     	; 0x136 <main+0xa4>
			break;


			case 8:
			PORTD=0b11111110;
 150:	f2 ba       	out	0x12, r15	; 18
 152:	f1 cf       	rjmp	.-30     	; 0x136 <main+0xa4>
			break;

			case 9:
			PORTD=0b11110110;
 154:	02 bb       	out	0x12, r16	; 18
 156:	ef cf       	rjmp	.-34     	; 0x136 <main+0xa4>
			break;

			default:
			PORTD=0x02;
 158:	d2 ba       	out	0x12, r13	; 18
 15a:	ed cf       	rjmp	.-38     	; 0x136 <main+0xa4>
 15c:	fa 01       	movw	r30, r20
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0xcc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 162:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 164:	d9 f7       	brne	.-10     	; 0x15c <main+0xca>
	{

		//PORTC=0xff;

	
		for(count=0;count<10;count++)
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	2a 30       	cpi	r18, 0x0A	; 10
 16c:	31 05       	cpc	r19, r1
 16e:	e4 f6       	brge	.-72     	; 0x128 <main+0x96>
 170:	b0 cf       	rjmp	.-160    	; 0xd2 <main+0x40>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
