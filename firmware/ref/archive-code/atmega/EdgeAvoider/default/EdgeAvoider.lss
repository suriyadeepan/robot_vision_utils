
EdgeAvoider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000062  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000011f  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007c  00000000  00000000  000002d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012b  00000000  00000000  0000034d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ad  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main()
{

	DDRC=0x00;
  92:	14 ba       	out	0x14, r1	; 20
	DDRD=0xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	81 bb       	out	0x11, r24	; 17

	while(1)
	{

		PORTD=PINA&0x30;
  98:	89 b3       	in	r24, 0x19	; 25
  9a:	80 73       	andi	r24, 0x30	; 48
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	fc cf       	rjmp	.-8      	; 0x98 <main+0x6>

000000a0 <moveStraigt1>:
#include <avr/io.h>

void moveStraigt1()
{

	PORTC=0b00001001;
  a0:	89 e0       	ldi	r24, 0x09	; 9
  a2:	85 bb       	out	0x15, r24	; 21


}
  a4:	08 95       	ret

000000a6 <stop>:

void stop()
{

	PORTC=0b00001000; 
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	85 bb       	out	0x15, r24	; 21


}
  aa:	08 95       	ret

000000ac <leftTurn>:

void leftTurn()
{
	PORTC=0b00000001; 
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	85 bb       	out	0x15, r24	; 21

}
  b0:	08 95       	ret

000000b2 <rightTurn>:

void rightTurn()
{
	PORTC=0b00001000;
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	85 bb       	out	0x15, r24	; 21

}
  b6:	08 95       	ret

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
