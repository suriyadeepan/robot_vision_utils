
TimerOnLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000a26  00000aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006e  0080006e  00000ac8  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011b  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b5  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000306  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006be  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a3  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000260  00000000  00000000  00001e6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8a:	0c 94 11 05 	jmp	0xa22	; 0xa22 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_timer0>:


void init_timer0()
{
	
	TCCR0=0x03;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	83 bf       	out	0x33, r24	; 51
	// set prescalar as 64

	TIMSK|=(1<<TOIE0);
  96:	89 b7       	in	r24, 0x39	; 57
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	89 bf       	out	0x39, r24	; 57
	// for enabling overflow interrupt

	TCNT0=0;
  9c:	12 be       	out	0x32, r1	; 50
	// init counter

	
}
  9e:	08 95       	ret

000000a0 <init_timer1>:

void init_timer1()
{
	TCCR1B=0x03;
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;
  a4:	1d bc       	out	0x2d, r1	; 45
  a6:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0x00;
  a8:	1f bc       	out	0x2f, r1	; 47
	TIMSK=0b00000100;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	89 bf       	out	0x39, r24	; 57
	

}
  ae:	08 95       	ret

000000b0 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	if(count==10)
  be:	80 91 6e 00 	lds	r24, 0x006E
  c2:	90 91 6f 00 	lds	r25, 0x006F
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	91 05       	cpc	r25, r1
  ca:	71 f4       	brne	.+28     	; 0xe8 <__vector_8+0x38>
	{
		sec++;
  cc:	80 91 70 00 	lds	r24, 0x0070
  d0:	90 91 71 00 	lds	r25, 0x0071
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 71 00 	sts	0x0071, r25
  da:	80 93 70 00 	sts	0x0070, r24
		count=0;
  de:	10 92 6f 00 	sts	0x006F, r1
  e2:	10 92 6e 00 	sts	0x006E, r1
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <__vector_8+0x42>

	}

	else
	count++;
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 6f 00 	sts	0x006F, r25
  ee:	80 93 6e 00 	sts	0x006E, r24


}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:



int main()
{
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
	lcd_init(LCD_DISP_ON);
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_init>
	lcd_puts("00:00:00");
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_puts>
	
}

void init_timer1()
{
	TCCR1B=0x03;
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;
 122:	1d bc       	out	0x2d, r1	; 45
 124:	1c bc       	out	0x2c, r1	; 44
	TCCR1A=0x00;
 126:	1f bc       	out	0x2f, r1	; 47
	TIMSK=0b00000100;
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	89 bf       	out	0x39, r24	; 57
	lcd_init(LCD_DISP_ON);
	lcd_puts("00:00:00");
	
	init_timer1();	

	sei();
 12c:	78 94       	sei

	// printing seconds
		lcd_gotoxy(6,0);
		//iota(sec,s,2);
		//lcd_puts((char*)sec);
		sprintf(s,"%2d",sec);
 12e:	96 e7       	ldi	r25, 0x76	; 118
 130:	c9 2e       	mov	r12, r25
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	d9 2e       	mov	r13, r25
 136:	c9 e6       	ldi	r28, 0x69	; 105
 138:	d0 e0       	ldi	r29, 0x00	; 0


	// printing minutes
		lcd_gotoxy(3,0);
		//iota(min,m,2);
		sprintf(m,"%2d",min);
 13a:	8a e7       	ldi	r24, 0x7A	; 122
 13c:	e8 2e       	mov	r14, r24
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	f8 2e       	mov	r15, r24


		// printing hours
		lcd_gotoxy(0,0);
		//iota(hr,h,2);
		sprintf(h,"%2d",hr);
 142:	08 e7       	ldi	r16, 0x78	; 120
 144:	10 e0       	ldi	r17, 0x00	; 0

// should be done inside ISR
//			sec++;

	// printing seconds
		lcd_gotoxy(6,0);
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	0e 94 bc 01 	call	0x378	; 0x378 <lcd_gotoxy>
		//iota(sec,s,2);
		//lcd_puts((char*)sec);
		sprintf(s,"%2d",sec);
 14e:	00 d0       	rcall	.+0      	; 0x150 <main+0x50>
 150:	00 d0       	rcall	.+0      	; 0x152 <main+0x52>
 152:	00 d0       	rcall	.+0      	; 0x154 <main+0x54>
 154:	ed b7       	in	r30, 0x3d	; 61
 156:	fe b7       	in	r31, 0x3e	; 62
 158:	31 96       	adiw	r30, 0x01	; 1
 15a:	ad b7       	in	r26, 0x3d	; 61
 15c:	be b7       	in	r27, 0x3e	; 62
 15e:	12 96       	adiw	r26, 0x02	; 2
 160:	dc 92       	st	X, r13
 162:	ce 92       	st	-X, r12
 164:	11 97       	sbiw	r26, 0x01	; 1
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
 16a:	80 91 70 00 	lds	r24, 0x0070
 16e:	90 91 71 00 	lds	r25, 0x0071
 172:	95 83       	std	Z+5, r25	; 0x05
 174:	84 83       	std	Z+4, r24	; 0x04
 176:	0e 94 39 02 	call	0x472	; 0x472 <sprintf>
		lcd_puts(s);
 17a:	8d b7       	in	r24, 0x3d	; 61
 17c:	9e b7       	in	r25, 0x3e	; 62
 17e:	06 96       	adiw	r24, 0x06	; 6
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	9e bf       	out	0x3e, r25	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	8d bf       	out	0x3d, r24	; 61
 18a:	c6 01       	movw	r24, r12
 18c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_puts>

		if(sec>=59)
 190:	80 91 70 00 	lds	r24, 0x0070
 194:	90 91 71 00 	lds	r25, 0x0071
 198:	cb 97       	sbiw	r24, 0x3b	; 59
 19a:	6c f0       	brlt	.+26     	; 0x1b6 <main+0xb6>
		{
			sec=0;
 19c:	10 92 71 00 	sts	0x0071, r1
 1a0:	10 92 70 00 	sts	0x0070, r1
			min++;
 1a4:	80 91 72 00 	lds	r24, 0x0072
 1a8:	90 91 73 00 	lds	r25, 0x0073
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 73 00 	sts	0x0073, r25
 1b2:	80 93 72 00 	sts	0x0072, r24
		}


	// printing minutes
		lcd_gotoxy(3,0);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	0e 94 bc 01 	call	0x378	; 0x378 <lcd_gotoxy>
		//iota(min,m,2);
		sprintf(m,"%2d",min);
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <main+0xc0>
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <main+0xc2>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <main+0xc4>
 1c4:	ed b7       	in	r30, 0x3d	; 61
 1c6:	fe b7       	in	r31, 0x3e	; 62
 1c8:	31 96       	adiw	r30, 0x01	; 1
 1ca:	ad b7       	in	r26, 0x3d	; 61
 1cc:	be b7       	in	r27, 0x3e	; 62
 1ce:	12 96       	adiw	r26, 0x02	; 2
 1d0:	fc 92       	st	X, r15
 1d2:	ee 92       	st	-X, r14
 1d4:	11 97       	sbiw	r26, 0x01	; 1
 1d6:	d3 83       	std	Z+3, r29	; 0x03
 1d8:	c2 83       	std	Z+2, r28	; 0x02
 1da:	80 91 72 00 	lds	r24, 0x0072
 1de:	90 91 73 00 	lds	r25, 0x0073
 1e2:	95 83       	std	Z+5, r25	; 0x05
 1e4:	84 83       	std	Z+4, r24	; 0x04
 1e6:	0e 94 39 02 	call	0x472	; 0x472 <sprintf>
		lcd_puts(m);
 1ea:	8d b7       	in	r24, 0x3d	; 61
 1ec:	9e b7       	in	r25, 0x3e	; 62
 1ee:	06 96       	adiw	r24, 0x06	; 6
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	9e bf       	out	0x3e, r25	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	8d bf       	out	0x3d, r24	; 61
 1fa:	c7 01       	movw	r24, r14
 1fc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_puts>
		

		if(min>=59)
 200:	80 91 72 00 	lds	r24, 0x0072
 204:	90 91 73 00 	lds	r25, 0x0073
 208:	cb 97       	sbiw	r24, 0x3b	; 59
 20a:	6c f0       	brlt	.+26     	; 0x226 <main+0x126>
		{
			min=0;
 20c:	10 92 73 00 	sts	0x0073, r1
 210:	10 92 72 00 	sts	0x0072, r1
			hr++;
 214:	80 91 74 00 	lds	r24, 0x0074
 218:	90 91 75 00 	lds	r25, 0x0075
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 75 00 	sts	0x0075, r25
 222:	80 93 74 00 	sts	0x0074, r24
		}


		// printing hours
		lcd_gotoxy(0,0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	0e 94 bc 01 	call	0x378	; 0x378 <lcd_gotoxy>
		//iota(hr,h,2);
		sprintf(h,"%2d",hr);
 22e:	00 d0       	rcall	.+0      	; 0x230 <main+0x130>
 230:	00 d0       	rcall	.+0      	; 0x232 <main+0x132>
 232:	00 d0       	rcall	.+0      	; 0x234 <main+0x134>
 234:	ed b7       	in	r30, 0x3d	; 61
 236:	fe b7       	in	r31, 0x3e	; 62
 238:	31 96       	adiw	r30, 0x01	; 1
 23a:	ad b7       	in	r26, 0x3d	; 61
 23c:	be b7       	in	r27, 0x3e	; 62
 23e:	12 96       	adiw	r26, 0x02	; 2
 240:	1c 93       	st	X, r17
 242:	0e 93       	st	-X, r16
 244:	11 97       	sbiw	r26, 0x01	; 1
 246:	d3 83       	std	Z+3, r29	; 0x03
 248:	c2 83       	std	Z+2, r28	; 0x02
 24a:	80 91 74 00 	lds	r24, 0x0074
 24e:	90 91 75 00 	lds	r25, 0x0075
 252:	95 83       	std	Z+5, r25	; 0x05
 254:	84 83       	std	Z+4, r24	; 0x04
 256:	0e 94 39 02 	call	0x472	; 0x472 <sprintf>
		lcd_puts(h);
 25a:	8d b7       	in	r24, 0x3d	; 61
 25c:	9e b7       	in	r25, 0x3e	; 62
 25e:	06 96       	adiw	r24, 0x06	; 6
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	9e bf       	out	0x3e, r25	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	8d bf       	out	0x3d, r24	; 61
 26a:	c8 01       	movw	r24, r16
 26c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_puts>

		if(hr>=59)
 270:	80 91 74 00 	lds	r24, 0x0074
 274:	90 91 75 00 	lds	r25, 0x0075
 278:	cb 97       	sbiw	r24, 0x3b	; 59
 27a:	0c f4       	brge	.+2      	; 0x27e <main+0x17e>
 27c:	64 cf       	rjmp	.-312    	; 0x146 <main+0x46>
		{
			min=0;
 27e:	10 92 73 00 	sts	0x0073, r1
 282:	10 92 72 00 	sts	0x0072, r1
			hr=0;
 286:	10 92 75 00 	sts	0x0075, r1
 28a:	10 92 74 00 	sts	0x0074, r1
			sec=0;
 28e:	10 92 71 00 	sts	0x0071, r1
 292:	10 92 70 00 	sts	0x0070, r1
 296:	57 cf       	rjmp	.-338    	; 0x146 <main+0x46>

00000298 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 298:	66 23       	and	r22, r22
 29a:	11 f0       	breq	.+4      	; 0x2a0 <lcd_write+0x8>
       lcd_rs_high();
 29c:	c0 9a       	sbi	0x18, 0	; 24
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 2a0:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
 2a2:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2a4:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2a6:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2a8:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2aa:	bf 9a       	sbi	0x17, 7	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 2ac:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 2ae:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 2b0:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 2b2:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2b4:	87 fd       	sbrc	r24, 7
 2b6:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 2b8:	86 fd       	sbrc	r24, 6
 2ba:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2bc:	85 fd       	sbrc	r24, 5
 2be:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 2c0:	84 fd       	sbrc	r24, 4
 2c2:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2c4:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_write+0x30>
    lcd_e_low();
 2c8:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 2ca:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 2cc:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 2ce:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 2d0:	c4 98       	cbi	0x18, 4	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2d2:	83 fd       	sbrc	r24, 3
 2d4:	c7 9a       	sbi	0x18, 7	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 2d6:	82 fd       	sbrc	r24, 2
 2d8:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2da:	81 fd       	sbrc	r24, 1
 2dc:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 2de:	80 fd       	sbrc	r24, 0
 2e0:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2e2:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_write+0x4e>
    lcd_e_low();
 2e6:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 2e8:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2ea:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 2ec:	c6 9a       	sbi	0x18, 6	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2ee:	c7 9a       	sbi	0x18, 7	; 24
    }
}
 2f0:	08 95       	ret

000002f2 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 2f2:	88 23       	and	r24, r24
 2f4:	11 f0       	breq	.+4      	; 0x2fa <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 2f6:	c0 9a       	sbi	0x18, 0	; 24
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 2fa:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 2fc:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 2fe:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 300:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 302:	be 98       	cbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 304:	bf 98       	cbi	0x17, 7	; 23
                
        /* read high nibble first */
        lcd_e_high();
 306:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
 308:	00 c0       	rjmp	.+0      	; 0x30a <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 30a:	b4 9b       	sbis	0x16, 4	; 22
 30c:	02 c0       	rjmp	.+4      	; 0x312 <lcd_read+0x20>
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	01 c0       	rjmp	.+2      	; 0x314 <lcd_read+0x22>
 312:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 314:	b5 99       	sbic	0x16, 5	; 22
 316:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 318:	b6 99       	sbic	0x16, 6	; 22
 31a:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 31c:	b7 99       	sbic	0x16, 7	; 22
 31e:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 320:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
 322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 324:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
 326:	00 c0       	rjmp	.+0      	; 0x328 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 328:	b4 99       	sbic	0x16, 4	; 22
 32a:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 32c:	b5 99       	sbic	0x16, 5	; 22
 32e:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 330:	b6 99       	sbic	0x16, 6	; 22
 332:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 334:	b7 99       	sbic	0x16, 7	; 22
 336:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 338:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
 33a:	08 95       	ret

0000033c <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_read>
 342:	87 fd       	sbrc	r24, 7
 344:	fb cf       	rjmp	.-10     	; 0x33c <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 346:	00 c0       	rjmp	.+0      	; 0x348 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_read>
    
}/* lcd_waitbusy */
 34e:	08 95       	ret

00000350 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 350:	1f 93       	push	r17
 352:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 354:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_waitbusy>
    lcd_write(cmd,0);
 358:	81 2f       	mov	r24, r17
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write>
}
 360:	1f 91       	pop	r17
 362:	08 95       	ret

00000364 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 364:	1f 93       	push	r17
 366:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 368:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_waitbusy>
    lcd_write(data,1);
 36c:	81 2f       	mov	r24, r17
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write>
}
 374:	1f 91       	pop	r17
 376:	08 95       	ret

00000378 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 378:	66 23       	and	r22, r22
 37a:	11 f4       	brne	.+4      	; 0x380 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 37c:	80 58       	subi	r24, 0x80	; 128
 37e:	01 c0       	rjmp	.+2      	; 0x382 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 380:	80 54       	subi	r24, 0x40	; 64
 382:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>
 386:	08 95       	ret

00000388 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 388:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_waitbusy>
}
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	08 95       	ret

00000390 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>
}
 396:	08 95       	ret

00000398 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>
}
 39e:	08 95       	ret

000003a0 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 3a0:	1f 93       	push	r17
 3a2:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 3a4:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_waitbusy>
    if (c=='\n')
 3a8:	1a 30       	cpi	r17, 0x0A	; 10
 3aa:	49 f4       	brne	.+18     	; 0x3be <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 3ac:	80 34       	cpi	r24, 0x40	; 64
 3ae:	10 f0       	brcs	.+4      	; 0x3b4 <lcd_putc+0x14>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <lcd_putc+0x16>
 3b4:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 3b6:	80 58       	subi	r24, 0x80	; 128
 3b8:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 3be:	81 2f       	mov	r24, r17
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write>
    }

}/* lcd_putc */
 3c6:	1f 91       	pop	r17
 3c8:	08 95       	ret

000003ca <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 3d2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 3d6:	89 91       	ld	r24, Y+
 3d8:	88 23       	and	r24, r24
 3da:	d9 f7       	brne	.-10     	; 0x3d2 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	ec 01       	movw	r28, r24
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 3ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_putc>
 3ee:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	84 91       	lpm	r24, Z+
 3f4:	88 23       	and	r24, r24
 3f6:	c9 f7       	brne	.-14     	; 0x3ea <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3fe:	1f 93       	push	r17
 400:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 402:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 404:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 406:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 408:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 40a:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 40c:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 40e:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 410:	80 ea       	ldi	r24, 0xA0	; 160
 412:	9f e0       	ldi	r25, 0x0F	; 15
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 418:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 41a:	c4 9a       	sbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 41c:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 41e:	00 c0       	rjmp	.+0      	; 0x420 <lcd_init+0x22>
    lcd_e_low();
 420:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 422:	80 ee       	ldi	r24, 0xE0	; 224
 424:	94 e0       	ldi	r25, 0x04	; 4
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 42a:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x30>
    lcd_e_low();
 42e:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 430:	80 e1       	ldi	r24, 0x10	; 16
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	fc 01       	movw	r30, r24
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 43a:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x40>
    lcd_e_low();
 43e:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 440:	fc 01       	movw	r30, r24
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 446:	c4 98       	cbi	0x18, 4	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 448:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
 44a:	00 c0       	rjmp	.+0      	; 0x44c <lcd_init+0x4e>
    lcd_e_low();
 44c:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 452:	88 e2       	ldi	r24, 0x28	; 40
 454:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 458:	88 e0       	ldi	r24, 0x08	; 8
 45a:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 45e:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 468:	81 2f       	mov	r24, r17
 46a:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_command>

}/* lcd_init */
 46e:	1f 91       	pop	r17
 470:	08 95       	ret

00000472 <sprintf>:
 472:	ae e0       	ldi	r26, 0x0E	; 14
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	ef e3       	ldi	r30, 0x3F	; 63
 478:	f2 e0       	ldi	r31, 0x02	; 2
 47a:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__prologue_saves__+0x1c>
 47e:	0d 89       	ldd	r16, Y+21	; 0x15
 480:	1e 89       	ldd	r17, Y+22	; 0x16
 482:	86 e0       	ldi	r24, 0x06	; 6
 484:	8c 83       	std	Y+4, r24	; 0x04
 486:	1a 83       	std	Y+2, r17	; 0x02
 488:	09 83       	std	Y+1, r16	; 0x01
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	9f e7       	ldi	r25, 0x7F	; 127
 48e:	9e 83       	std	Y+6, r25	; 0x06
 490:	8d 83       	std	Y+5, r24	; 0x05
 492:	9e 01       	movw	r18, r28
 494:	27 5e       	subi	r18, 0xE7	; 231
 496:	3f 4f       	sbci	r19, 0xFF	; 255
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	6f 89       	ldd	r22, Y+23	; 0x17
 49e:	78 8d       	ldd	r23, Y+24	; 0x18
 4a0:	a9 01       	movw	r20, r18
 4a2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <vfprintf>
 4a6:	2f 81       	ldd	r18, Y+7	; 0x07
 4a8:	38 85       	ldd	r19, Y+8	; 0x08
 4aa:	02 0f       	add	r16, r18
 4ac:	13 1f       	adc	r17, r19
 4ae:	f8 01       	movw	r30, r16
 4b0:	10 82       	st	Z, r1
 4b2:	2e 96       	adiw	r28, 0x0e	; 14
 4b4:	e4 e0       	ldi	r30, 0x04	; 4
 4b6:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__epilogue_restores__+0x1c>

000004ba <vfprintf>:
 4ba:	ab e0       	ldi	r26, 0x0B	; 11
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e3 e6       	ldi	r30, 0x63	; 99
 4c0:	f2 e0       	ldi	r31, 0x02	; 2
 4c2:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__prologue_saves__>
 4c6:	3c 01       	movw	r6, r24
 4c8:	2b 01       	movw	r4, r22
 4ca:	5a 01       	movw	r10, r20
 4cc:	fc 01       	movw	r30, r24
 4ce:	17 82       	std	Z+7, r1	; 0x07
 4d0:	16 82       	std	Z+6, r1	; 0x06
 4d2:	83 81       	ldd	r24, Z+3	; 0x03
 4d4:	81 fd       	sbrc	r24, 1
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <vfprintf+0x24>
 4d8:	6f ef       	ldi	r22, 0xFF	; 255
 4da:	7f ef       	ldi	r23, 0xFF	; 255
 4dc:	c6 c1       	rjmp	.+908    	; 0x86a <vfprintf+0x3b0>
 4de:	9a e0       	ldi	r25, 0x0A	; 10
 4e0:	89 2e       	mov	r8, r25
 4e2:	1e 01       	movw	r2, r28
 4e4:	08 94       	sec
 4e6:	21 1c       	adc	r2, r1
 4e8:	31 1c       	adc	r3, r1
 4ea:	f3 01       	movw	r30, r6
 4ec:	23 81       	ldd	r18, Z+3	; 0x03
 4ee:	f2 01       	movw	r30, r4
 4f0:	23 fd       	sbrc	r18, 3
 4f2:	85 91       	lpm	r24, Z+
 4f4:	23 ff       	sbrs	r18, 3
 4f6:	81 91       	ld	r24, Z+
 4f8:	2f 01       	movw	r4, r30
 4fa:	88 23       	and	r24, r24
 4fc:	09 f4       	brne	.+2      	; 0x500 <vfprintf+0x46>
 4fe:	b2 c1       	rjmp	.+868    	; 0x864 <vfprintf+0x3aa>
 500:	85 32       	cpi	r24, 0x25	; 37
 502:	39 f4       	brne	.+14     	; 0x512 <vfprintf+0x58>
 504:	23 fd       	sbrc	r18, 3
 506:	85 91       	lpm	r24, Z+
 508:	23 ff       	sbrs	r18, 3
 50a:	81 91       	ld	r24, Z+
 50c:	2f 01       	movw	r4, r30
 50e:	85 32       	cpi	r24, 0x25	; 37
 510:	29 f4       	brne	.+10     	; 0x51c <vfprintf+0x62>
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	b3 01       	movw	r22, r6
 516:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 51a:	e7 cf       	rjmp	.-50     	; 0x4ea <vfprintf+0x30>
 51c:	98 2f       	mov	r25, r24
 51e:	ff 24       	eor	r15, r15
 520:	ee 24       	eor	r14, r14
 522:	99 24       	eor	r9, r9
 524:	ff e1       	ldi	r31, 0x1F	; 31
 526:	ff 15       	cp	r31, r15
 528:	d0 f0       	brcs	.+52     	; 0x55e <vfprintf+0xa4>
 52a:	9b 32       	cpi	r25, 0x2B	; 43
 52c:	69 f0       	breq	.+26     	; 0x548 <vfprintf+0x8e>
 52e:	9c 32       	cpi	r25, 0x2C	; 44
 530:	28 f4       	brcc	.+10     	; 0x53c <vfprintf+0x82>
 532:	90 32       	cpi	r25, 0x20	; 32
 534:	59 f0       	breq	.+22     	; 0x54c <vfprintf+0x92>
 536:	93 32       	cpi	r25, 0x23	; 35
 538:	91 f4       	brne	.+36     	; 0x55e <vfprintf+0xa4>
 53a:	0e c0       	rjmp	.+28     	; 0x558 <vfprintf+0x9e>
 53c:	9d 32       	cpi	r25, 0x2D	; 45
 53e:	49 f0       	breq	.+18     	; 0x552 <vfprintf+0x98>
 540:	90 33       	cpi	r25, 0x30	; 48
 542:	69 f4       	brne	.+26     	; 0x55e <vfprintf+0xa4>
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	24 c0       	rjmp	.+72     	; 0x590 <vfprintf+0xd6>
 548:	52 e0       	ldi	r21, 0x02	; 2
 54a:	f5 2a       	or	r15, r21
 54c:	84 e0       	ldi	r24, 0x04	; 4
 54e:	f8 2a       	or	r15, r24
 550:	28 c0       	rjmp	.+80     	; 0x5a2 <vfprintf+0xe8>
 552:	98 e0       	ldi	r25, 0x08	; 8
 554:	f9 2a       	or	r15, r25
 556:	25 c0       	rjmp	.+74     	; 0x5a2 <vfprintf+0xe8>
 558:	e0 e1       	ldi	r30, 0x10	; 16
 55a:	fe 2a       	or	r15, r30
 55c:	22 c0       	rjmp	.+68     	; 0x5a2 <vfprintf+0xe8>
 55e:	f7 fc       	sbrc	r15, 7
 560:	29 c0       	rjmp	.+82     	; 0x5b4 <vfprintf+0xfa>
 562:	89 2f       	mov	r24, r25
 564:	80 53       	subi	r24, 0x30	; 48
 566:	8a 30       	cpi	r24, 0x0A	; 10
 568:	70 f4       	brcc	.+28     	; 0x586 <vfprintf+0xcc>
 56a:	f6 fe       	sbrs	r15, 6
 56c:	05 c0       	rjmp	.+10     	; 0x578 <vfprintf+0xbe>
 56e:	98 9c       	mul	r9, r8
 570:	90 2c       	mov	r9, r0
 572:	11 24       	eor	r1, r1
 574:	98 0e       	add	r9, r24
 576:	15 c0       	rjmp	.+42     	; 0x5a2 <vfprintf+0xe8>
 578:	e8 9c       	mul	r14, r8
 57a:	e0 2c       	mov	r14, r0
 57c:	11 24       	eor	r1, r1
 57e:	e8 0e       	add	r14, r24
 580:	f0 e2       	ldi	r31, 0x20	; 32
 582:	ff 2a       	or	r15, r31
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <vfprintf+0xe8>
 586:	9e 32       	cpi	r25, 0x2E	; 46
 588:	29 f4       	brne	.+10     	; 0x594 <vfprintf+0xda>
 58a:	f6 fc       	sbrc	r15, 6
 58c:	6b c1       	rjmp	.+726    	; 0x864 <vfprintf+0x3aa>
 58e:	40 e4       	ldi	r20, 0x40	; 64
 590:	f4 2a       	or	r15, r20
 592:	07 c0       	rjmp	.+14     	; 0x5a2 <vfprintf+0xe8>
 594:	9c 36       	cpi	r25, 0x6C	; 108
 596:	19 f4       	brne	.+6      	; 0x59e <vfprintf+0xe4>
 598:	50 e8       	ldi	r21, 0x80	; 128
 59a:	f5 2a       	or	r15, r21
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <vfprintf+0xe8>
 59e:	98 36       	cpi	r25, 0x68	; 104
 5a0:	49 f4       	brne	.+18     	; 0x5b4 <vfprintf+0xfa>
 5a2:	f2 01       	movw	r30, r4
 5a4:	23 fd       	sbrc	r18, 3
 5a6:	95 91       	lpm	r25, Z+
 5a8:	23 ff       	sbrs	r18, 3
 5aa:	91 91       	ld	r25, Z+
 5ac:	2f 01       	movw	r4, r30
 5ae:	99 23       	and	r25, r25
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <vfprintf+0xfa>
 5b2:	b8 cf       	rjmp	.-144    	; 0x524 <vfprintf+0x6a>
 5b4:	89 2f       	mov	r24, r25
 5b6:	85 54       	subi	r24, 0x45	; 69
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	18 f0       	brcs	.+6      	; 0x5c2 <vfprintf+0x108>
 5bc:	80 52       	subi	r24, 0x20	; 32
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	38 f4       	brcc	.+14     	; 0x5d0 <vfprintf+0x116>
 5c2:	44 e0       	ldi	r20, 0x04	; 4
 5c4:	50 e0       	ldi	r21, 0x00	; 0
 5c6:	a4 0e       	add	r10, r20
 5c8:	b5 1e       	adc	r11, r21
 5ca:	5f e3       	ldi	r21, 0x3F	; 63
 5cc:	59 83       	std	Y+1, r21	; 0x01
 5ce:	0f c0       	rjmp	.+30     	; 0x5ee <vfprintf+0x134>
 5d0:	93 36       	cpi	r25, 0x63	; 99
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <vfprintf+0x126>
 5d4:	93 37       	cpi	r25, 0x73	; 115
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <vfprintf+0x13c>
 5d8:	93 35       	cpi	r25, 0x53	; 83
 5da:	09 f0       	breq	.+2      	; 0x5de <vfprintf+0x124>
 5dc:	56 c0       	rjmp	.+172    	; 0x68a <vfprintf+0x1d0>
 5de:	20 c0       	rjmp	.+64     	; 0x620 <vfprintf+0x166>
 5e0:	f5 01       	movw	r30, r10
 5e2:	80 81       	ld	r24, Z
 5e4:	89 83       	std	Y+1, r24	; 0x01
 5e6:	42 e0       	ldi	r20, 0x02	; 2
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	a4 0e       	add	r10, r20
 5ec:	b5 1e       	adc	r11, r21
 5ee:	61 01       	movw	r12, r2
 5f0:	01 e0       	ldi	r16, 0x01	; 1
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	12 c0       	rjmp	.+36     	; 0x61a <vfprintf+0x160>
 5f6:	f5 01       	movw	r30, r10
 5f8:	c0 80       	ld	r12, Z
 5fa:	d1 80       	ldd	r13, Z+1	; 0x01
 5fc:	f6 fc       	sbrc	r15, 6
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <vfprintf+0x14c>
 600:	6f ef       	ldi	r22, 0xFF	; 255
 602:	7f ef       	ldi	r23, 0xFF	; 255
 604:	02 c0       	rjmp	.+4      	; 0x60a <vfprintf+0x150>
 606:	69 2d       	mov	r22, r9
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	42 e0       	ldi	r20, 0x02	; 2
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	a4 0e       	add	r10, r20
 610:	b5 1e       	adc	r11, r21
 612:	c6 01       	movw	r24, r12
 614:	0e 94 45 04 	call	0x88a	; 0x88a <strnlen>
 618:	8c 01       	movw	r16, r24
 61a:	5f e7       	ldi	r21, 0x7F	; 127
 61c:	f5 22       	and	r15, r21
 61e:	14 c0       	rjmp	.+40     	; 0x648 <vfprintf+0x18e>
 620:	f5 01       	movw	r30, r10
 622:	c0 80       	ld	r12, Z
 624:	d1 80       	ldd	r13, Z+1	; 0x01
 626:	f6 fc       	sbrc	r15, 6
 628:	03 c0       	rjmp	.+6      	; 0x630 <vfprintf+0x176>
 62a:	6f ef       	ldi	r22, 0xFF	; 255
 62c:	7f ef       	ldi	r23, 0xFF	; 255
 62e:	02 c0       	rjmp	.+4      	; 0x634 <vfprintf+0x17a>
 630:	69 2d       	mov	r22, r9
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	42 e0       	ldi	r20, 0x02	; 2
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	a4 0e       	add	r10, r20
 63a:	b5 1e       	adc	r11, r21
 63c:	c6 01       	movw	r24, r12
 63e:	0e 94 3a 04 	call	0x874	; 0x874 <strnlen_P>
 642:	8c 01       	movw	r16, r24
 644:	50 e8       	ldi	r21, 0x80	; 128
 646:	f5 2a       	or	r15, r21
 648:	f3 fe       	sbrs	r15, 3
 64a:	07 c0       	rjmp	.+14     	; 0x65a <vfprintf+0x1a0>
 64c:	1a c0       	rjmp	.+52     	; 0x682 <vfprintf+0x1c8>
 64e:	80 e2       	ldi	r24, 0x20	; 32
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	b3 01       	movw	r22, r6
 654:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 658:	ea 94       	dec	r14
 65a:	8e 2d       	mov	r24, r14
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	08 17       	cp	r16, r24
 660:	19 07       	cpc	r17, r25
 662:	a8 f3       	brcs	.-22     	; 0x64e <vfprintf+0x194>
 664:	0e c0       	rjmp	.+28     	; 0x682 <vfprintf+0x1c8>
 666:	f6 01       	movw	r30, r12
 668:	f7 fc       	sbrc	r15, 7
 66a:	85 91       	lpm	r24, Z+
 66c:	f7 fe       	sbrs	r15, 7
 66e:	81 91       	ld	r24, Z+
 670:	6f 01       	movw	r12, r30
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	b3 01       	movw	r22, r6
 676:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 67a:	e1 10       	cpse	r14, r1
 67c:	ea 94       	dec	r14
 67e:	01 50       	subi	r16, 0x01	; 1
 680:	10 40       	sbci	r17, 0x00	; 0
 682:	01 15       	cp	r16, r1
 684:	11 05       	cpc	r17, r1
 686:	79 f7       	brne	.-34     	; 0x666 <vfprintf+0x1ac>
 688:	ea c0       	rjmp	.+468    	; 0x85e <vfprintf+0x3a4>
 68a:	94 36       	cpi	r25, 0x64	; 100
 68c:	11 f0       	breq	.+4      	; 0x692 <vfprintf+0x1d8>
 68e:	99 36       	cpi	r25, 0x69	; 105
 690:	69 f5       	brne	.+90     	; 0x6ec <vfprintf+0x232>
 692:	f7 fe       	sbrs	r15, 7
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <vfprintf+0x1ec>
 696:	f5 01       	movw	r30, r10
 698:	20 81       	ld	r18, Z
 69a:	31 81       	ldd	r19, Z+1	; 0x01
 69c:	42 81       	ldd	r20, Z+2	; 0x02
 69e:	53 81       	ldd	r21, Z+3	; 0x03
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0a c0       	rjmp	.+20     	; 0x6ba <vfprintf+0x200>
 6a6:	f5 01       	movw	r30, r10
 6a8:	80 81       	ld	r24, Z
 6aa:	91 81       	ldd	r25, Z+1	; 0x01
 6ac:	9c 01       	movw	r18, r24
 6ae:	44 27       	eor	r20, r20
 6b0:	37 fd       	sbrc	r19, 7
 6b2:	40 95       	com	r20
 6b4:	54 2f       	mov	r21, r20
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	a8 0e       	add	r10, r24
 6bc:	b9 1e       	adc	r11, r25
 6be:	9f e6       	ldi	r25, 0x6F	; 111
 6c0:	f9 22       	and	r15, r25
 6c2:	57 ff       	sbrs	r21, 7
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <vfprintf+0x21e>
 6c6:	50 95       	com	r21
 6c8:	40 95       	com	r20
 6ca:	30 95       	com	r19
 6cc:	21 95       	neg	r18
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	4f 4f       	sbci	r20, 0xFF	; 255
 6d2:	5f 4f       	sbci	r21, 0xFF	; 255
 6d4:	e0 e8       	ldi	r30, 0x80	; 128
 6d6:	fe 2a       	or	r15, r30
 6d8:	ca 01       	movw	r24, r20
 6da:	b9 01       	movw	r22, r18
 6dc:	a1 01       	movw	r20, r2
 6de:	2a e0       	ldi	r18, 0x0A	; 10
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__ultoa_invert>
 6e6:	d8 2e       	mov	r13, r24
 6e8:	d2 18       	sub	r13, r2
 6ea:	40 c0       	rjmp	.+128    	; 0x76c <vfprintf+0x2b2>
 6ec:	95 37       	cpi	r25, 0x75	; 117
 6ee:	29 f4       	brne	.+10     	; 0x6fa <vfprintf+0x240>
 6f0:	1f 2d       	mov	r17, r15
 6f2:	1f 7e       	andi	r17, 0xEF	; 239
 6f4:	2a e0       	ldi	r18, 0x0A	; 10
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	1d c0       	rjmp	.+58     	; 0x734 <vfprintf+0x27a>
 6fa:	1f 2d       	mov	r17, r15
 6fc:	19 7f       	andi	r17, 0xF9	; 249
 6fe:	9f 36       	cpi	r25, 0x6F	; 111
 700:	61 f0       	breq	.+24     	; 0x71a <vfprintf+0x260>
 702:	90 37       	cpi	r25, 0x70	; 112
 704:	20 f4       	brcc	.+8      	; 0x70e <vfprintf+0x254>
 706:	98 35       	cpi	r25, 0x58	; 88
 708:	09 f0       	breq	.+2      	; 0x70c <vfprintf+0x252>
 70a:	ac c0       	rjmp	.+344    	; 0x864 <vfprintf+0x3aa>
 70c:	0f c0       	rjmp	.+30     	; 0x72c <vfprintf+0x272>
 70e:	90 37       	cpi	r25, 0x70	; 112
 710:	39 f0       	breq	.+14     	; 0x720 <vfprintf+0x266>
 712:	98 37       	cpi	r25, 0x78	; 120
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0x25e>
 716:	a6 c0       	rjmp	.+332    	; 0x864 <vfprintf+0x3aa>
 718:	04 c0       	rjmp	.+8      	; 0x722 <vfprintf+0x268>
 71a:	28 e0       	ldi	r18, 0x08	; 8
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	0a c0       	rjmp	.+20     	; 0x734 <vfprintf+0x27a>
 720:	10 61       	ori	r17, 0x10	; 16
 722:	14 fd       	sbrc	r17, 4
 724:	14 60       	ori	r17, 0x04	; 4
 726:	20 e1       	ldi	r18, 0x10	; 16
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	04 c0       	rjmp	.+8      	; 0x734 <vfprintf+0x27a>
 72c:	14 fd       	sbrc	r17, 4
 72e:	16 60       	ori	r17, 0x06	; 6
 730:	20 e1       	ldi	r18, 0x10	; 16
 732:	32 e0       	ldi	r19, 0x02	; 2
 734:	17 ff       	sbrs	r17, 7
 736:	08 c0       	rjmp	.+16     	; 0x748 <vfprintf+0x28e>
 738:	f5 01       	movw	r30, r10
 73a:	60 81       	ld	r22, Z
 73c:	71 81       	ldd	r23, Z+1	; 0x01
 73e:	82 81       	ldd	r24, Z+2	; 0x02
 740:	93 81       	ldd	r25, Z+3	; 0x03
 742:	44 e0       	ldi	r20, 0x04	; 4
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	08 c0       	rjmp	.+16     	; 0x758 <vfprintf+0x29e>
 748:	f5 01       	movw	r30, r10
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	bc 01       	movw	r22, r24
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	42 e0       	ldi	r20, 0x02	; 2
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	a4 0e       	add	r10, r20
 75a:	b5 1e       	adc	r11, r21
 75c:	a1 01       	movw	r20, r2
 75e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__ultoa_invert>
 762:	d8 2e       	mov	r13, r24
 764:	d2 18       	sub	r13, r2
 766:	8f e7       	ldi	r24, 0x7F	; 127
 768:	f8 2e       	mov	r15, r24
 76a:	f1 22       	and	r15, r17
 76c:	f6 fe       	sbrs	r15, 6
 76e:	0b c0       	rjmp	.+22     	; 0x786 <vfprintf+0x2cc>
 770:	5e ef       	ldi	r21, 0xFE	; 254
 772:	f5 22       	and	r15, r21
 774:	d9 14       	cp	r13, r9
 776:	38 f4       	brcc	.+14     	; 0x786 <vfprintf+0x2cc>
 778:	f4 fe       	sbrs	r15, 4
 77a:	07 c0       	rjmp	.+14     	; 0x78a <vfprintf+0x2d0>
 77c:	f2 fc       	sbrc	r15, 2
 77e:	05 c0       	rjmp	.+10     	; 0x78a <vfprintf+0x2d0>
 780:	8f ee       	ldi	r24, 0xEF	; 239
 782:	f8 22       	and	r15, r24
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x2d0>
 786:	1d 2d       	mov	r17, r13
 788:	01 c0       	rjmp	.+2      	; 0x78c <vfprintf+0x2d2>
 78a:	19 2d       	mov	r17, r9
 78c:	f4 fe       	sbrs	r15, 4
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <vfprintf+0x2f0>
 790:	fe 01       	movw	r30, r28
 792:	ed 0d       	add	r30, r13
 794:	f1 1d       	adc	r31, r1
 796:	80 81       	ld	r24, Z
 798:	80 33       	cpi	r24, 0x30	; 48
 79a:	19 f4       	brne	.+6      	; 0x7a2 <vfprintf+0x2e8>
 79c:	99 ee       	ldi	r25, 0xE9	; 233
 79e:	f9 22       	and	r15, r25
 7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <vfprintf+0x2f8>
 7a2:	1f 5f       	subi	r17, 0xFF	; 255
 7a4:	f2 fe       	sbrs	r15, 2
 7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <vfprintf+0x2f8>
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <vfprintf+0x2f6>
 7aa:	8f 2d       	mov	r24, r15
 7ac:	86 78       	andi	r24, 0x86	; 134
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <vfprintf+0x2f8>
 7b0:	1f 5f       	subi	r17, 0xFF	; 255
 7b2:	0f 2d       	mov	r16, r15
 7b4:	f3 fc       	sbrc	r15, 3
 7b6:	14 c0       	rjmp	.+40     	; 0x7e0 <vfprintf+0x326>
 7b8:	f0 fe       	sbrs	r15, 0
 7ba:	0f c0       	rjmp	.+30     	; 0x7da <vfprintf+0x320>
 7bc:	1e 15       	cp	r17, r14
 7be:	10 f0       	brcs	.+4      	; 0x7c4 <vfprintf+0x30a>
 7c0:	9d 2c       	mov	r9, r13
 7c2:	0b c0       	rjmp	.+22     	; 0x7da <vfprintf+0x320>
 7c4:	9d 2c       	mov	r9, r13
 7c6:	9e 0c       	add	r9, r14
 7c8:	91 1a       	sub	r9, r17
 7ca:	1e 2d       	mov	r17, r14
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x320>
 7ce:	80 e2       	ldi	r24, 0x20	; 32
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	b3 01       	movw	r22, r6
 7d4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 7d8:	1f 5f       	subi	r17, 0xFF	; 255
 7da:	1e 15       	cp	r17, r14
 7dc:	c0 f3       	brcs	.-16     	; 0x7ce <vfprintf+0x314>
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <vfprintf+0x32e>
 7e0:	1e 15       	cp	r17, r14
 7e2:	10 f4       	brcc	.+4      	; 0x7e8 <vfprintf+0x32e>
 7e4:	e1 1a       	sub	r14, r17
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <vfprintf+0x330>
 7e8:	ee 24       	eor	r14, r14
 7ea:	04 ff       	sbrs	r16, 4
 7ec:	0f c0       	rjmp	.+30     	; 0x80c <vfprintf+0x352>
 7ee:	80 e3       	ldi	r24, 0x30	; 48
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	b3 01       	movw	r22, r6
 7f4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 7f8:	02 ff       	sbrs	r16, 2
 7fa:	1d c0       	rjmp	.+58     	; 0x836 <vfprintf+0x37c>
 7fc:	01 fd       	sbrc	r16, 1
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <vfprintf+0x34c>
 800:	88 e7       	ldi	r24, 0x78	; 120
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e c0       	rjmp	.+28     	; 0x822 <vfprintf+0x368>
 806:	88 e5       	ldi	r24, 0x58	; 88
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0b c0       	rjmp	.+22     	; 0x822 <vfprintf+0x368>
 80c:	80 2f       	mov	r24, r16
 80e:	86 78       	andi	r24, 0x86	; 134
 810:	91 f0       	breq	.+36     	; 0x836 <vfprintf+0x37c>
 812:	01 ff       	sbrs	r16, 1
 814:	02 c0       	rjmp	.+4      	; 0x81a <vfprintf+0x360>
 816:	8b e2       	ldi	r24, 0x2B	; 43
 818:	01 c0       	rjmp	.+2      	; 0x81c <vfprintf+0x362>
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	f7 fc       	sbrc	r15, 7
 81e:	8d e2       	ldi	r24, 0x2D	; 45
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	b3 01       	movw	r22, r6
 824:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 828:	06 c0       	rjmp	.+12     	; 0x836 <vfprintf+0x37c>
 82a:	80 e3       	ldi	r24, 0x30	; 48
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	b3 01       	movw	r22, r6
 830:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 834:	9a 94       	dec	r9
 836:	d9 14       	cp	r13, r9
 838:	c0 f3       	brcs	.-16     	; 0x82a <vfprintf+0x370>
 83a:	da 94       	dec	r13
 83c:	f1 01       	movw	r30, r2
 83e:	ed 0d       	add	r30, r13
 840:	f1 1d       	adc	r31, r1
 842:	80 81       	ld	r24, Z
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	b3 01       	movw	r22, r6
 848:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 84c:	dd 20       	and	r13, r13
 84e:	a9 f7       	brne	.-22     	; 0x83a <vfprintf+0x380>
 850:	06 c0       	rjmp	.+12     	; 0x85e <vfprintf+0x3a4>
 852:	80 e2       	ldi	r24, 0x20	; 32
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	b3 01       	movw	r22, r6
 858:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fputc>
 85c:	ea 94       	dec	r14
 85e:	ee 20       	and	r14, r14
 860:	c1 f7       	brne	.-16     	; 0x852 <vfprintf+0x398>
 862:	43 ce       	rjmp	.-890    	; 0x4ea <vfprintf+0x30>
 864:	f3 01       	movw	r30, r6
 866:	66 81       	ldd	r22, Z+6	; 0x06
 868:	77 81       	ldd	r23, Z+7	; 0x07
 86a:	cb 01       	movw	r24, r22
 86c:	2b 96       	adiw	r28, 0x0b	; 11
 86e:	e2 e1       	ldi	r30, 0x12	; 18
 870:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__epilogue_restores__>

00000874 <strnlen_P>:
 874:	fc 01       	movw	r30, r24
 876:	05 90       	lpm	r0, Z+
 878:	61 50       	subi	r22, 0x01	; 1
 87a:	70 40       	sbci	r23, 0x00	; 0
 87c:	01 10       	cpse	r0, r1
 87e:	d8 f7       	brcc	.-10     	; 0x876 <strnlen_P+0x2>
 880:	80 95       	com	r24
 882:	90 95       	com	r25
 884:	8e 0f       	add	r24, r30
 886:	9f 1f       	adc	r25, r31
 888:	08 95       	ret

0000088a <strnlen>:
 88a:	fc 01       	movw	r30, r24
 88c:	61 50       	subi	r22, 0x01	; 1
 88e:	70 40       	sbci	r23, 0x00	; 0
 890:	01 90       	ld	r0, Z+
 892:	01 10       	cpse	r0, r1
 894:	d8 f7       	brcc	.-10     	; 0x88c <strnlen+0x2>
 896:	80 95       	com	r24
 898:	90 95       	com	r25
 89a:	8e 0f       	add	r24, r30
 89c:	9f 1f       	adc	r25, r31
 89e:	08 95       	ret

000008a0 <fputc>:
 8a0:	0f 93       	push	r16
 8a2:	1f 93       	push	r17
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	8c 01       	movw	r16, r24
 8aa:	eb 01       	movw	r28, r22
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	81 ff       	sbrs	r24, 1
 8b0:	1b c0       	rjmp	.+54     	; 0x8e8 <fputc+0x48>
 8b2:	82 ff       	sbrs	r24, 2
 8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <fputc+0x30>
 8b6:	2e 81       	ldd	r18, Y+6	; 0x06
 8b8:	3f 81       	ldd	r19, Y+7	; 0x07
 8ba:	8c 81       	ldd	r24, Y+4	; 0x04
 8bc:	9d 81       	ldd	r25, Y+5	; 0x05
 8be:	28 17       	cp	r18, r24
 8c0:	39 07       	cpc	r19, r25
 8c2:	64 f4       	brge	.+24     	; 0x8dc <fputc+0x3c>
 8c4:	e8 81       	ld	r30, Y
 8c6:	f9 81       	ldd	r31, Y+1	; 0x01
 8c8:	01 93       	st	Z+, r16
 8ca:	f9 83       	std	Y+1, r31	; 0x01
 8cc:	e8 83       	st	Y, r30
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <fputc+0x3c>
 8d0:	e8 85       	ldd	r30, Y+8	; 0x08
 8d2:	f9 85       	ldd	r31, Y+9	; 0x09
 8d4:	80 2f       	mov	r24, r16
 8d6:	09 95       	icall
 8d8:	89 2b       	or	r24, r25
 8da:	31 f4       	brne	.+12     	; 0x8e8 <fputc+0x48>
 8dc:	8e 81       	ldd	r24, Y+6	; 0x06
 8de:	9f 81       	ldd	r25, Y+7	; 0x07
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	9f 83       	std	Y+7, r25	; 0x07
 8e4:	8e 83       	std	Y+6, r24	; 0x06
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <fputc+0x4c>
 8e8:	0f ef       	ldi	r16, 0xFF	; 255
 8ea:	1f ef       	ldi	r17, 0xFF	; 255
 8ec:	c8 01       	movw	r24, r16
 8ee:	df 91       	pop	r29
 8f0:	cf 91       	pop	r28
 8f2:	1f 91       	pop	r17
 8f4:	0f 91       	pop	r16
 8f6:	08 95       	ret

000008f8 <__ultoa_invert>:
 8f8:	fa 01       	movw	r30, r20
 8fa:	aa 27       	eor	r26, r26
 8fc:	28 30       	cpi	r18, 0x08	; 8
 8fe:	51 f1       	breq	.+84     	; 0x954 <__ultoa_invert+0x5c>
 900:	20 31       	cpi	r18, 0x10	; 16
 902:	81 f1       	breq	.+96     	; 0x964 <__ultoa_invert+0x6c>
 904:	e8 94       	clt
 906:	6f 93       	push	r22
 908:	6e 7f       	andi	r22, 0xFE	; 254
 90a:	6e 5f       	subi	r22, 0xFE	; 254
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	af 4f       	sbci	r26, 0xFF	; 255
 914:	b1 e0       	ldi	r27, 0x01	; 1
 916:	3e d0       	rcall	.+124    	; 0x994 <__ultoa_invert+0x9c>
 918:	b4 e0       	ldi	r27, 0x04	; 4
 91a:	3c d0       	rcall	.+120    	; 0x994 <__ultoa_invert+0x9c>
 91c:	67 0f       	add	r22, r23
 91e:	78 1f       	adc	r23, r24
 920:	89 1f       	adc	r24, r25
 922:	9a 1f       	adc	r25, r26
 924:	a1 1d       	adc	r26, r1
 926:	68 0f       	add	r22, r24
 928:	79 1f       	adc	r23, r25
 92a:	8a 1f       	adc	r24, r26
 92c:	91 1d       	adc	r25, r1
 92e:	a1 1d       	adc	r26, r1
 930:	6a 0f       	add	r22, r26
 932:	71 1d       	adc	r23, r1
 934:	81 1d       	adc	r24, r1
 936:	91 1d       	adc	r25, r1
 938:	a1 1d       	adc	r26, r1
 93a:	20 d0       	rcall	.+64     	; 0x97c <__ultoa_invert+0x84>
 93c:	09 f4       	brne	.+2      	; 0x940 <__ultoa_invert+0x48>
 93e:	68 94       	set
 940:	3f 91       	pop	r19
 942:	2a e0       	ldi	r18, 0x0A	; 10
 944:	26 9f       	mul	r18, r22
 946:	11 24       	eor	r1, r1
 948:	30 19       	sub	r19, r0
 94a:	30 5d       	subi	r19, 0xD0	; 208
 94c:	31 93       	st	Z+, r19
 94e:	de f6       	brtc	.-74     	; 0x906 <__ultoa_invert+0xe>
 950:	cf 01       	movw	r24, r30
 952:	08 95       	ret
 954:	46 2f       	mov	r20, r22
 956:	47 70       	andi	r20, 0x07	; 7
 958:	40 5d       	subi	r20, 0xD0	; 208
 95a:	41 93       	st	Z+, r20
 95c:	b3 e0       	ldi	r27, 0x03	; 3
 95e:	0f d0       	rcall	.+30     	; 0x97e <__ultoa_invert+0x86>
 960:	c9 f7       	brne	.-14     	; 0x954 <__ultoa_invert+0x5c>
 962:	f6 cf       	rjmp	.-20     	; 0x950 <__ultoa_invert+0x58>
 964:	46 2f       	mov	r20, r22
 966:	4f 70       	andi	r20, 0x0F	; 15
 968:	40 5d       	subi	r20, 0xD0	; 208
 96a:	4a 33       	cpi	r20, 0x3A	; 58
 96c:	18 f0       	brcs	.+6      	; 0x974 <__ultoa_invert+0x7c>
 96e:	49 5d       	subi	r20, 0xD9	; 217
 970:	31 fd       	sbrc	r19, 1
 972:	40 52       	subi	r20, 0x20	; 32
 974:	41 93       	st	Z+, r20
 976:	02 d0       	rcall	.+4      	; 0x97c <__ultoa_invert+0x84>
 978:	a9 f7       	brne	.-22     	; 0x964 <__ultoa_invert+0x6c>
 97a:	ea cf       	rjmp	.-44     	; 0x950 <__ultoa_invert+0x58>
 97c:	b4 e0       	ldi	r27, 0x04	; 4
 97e:	a6 95       	lsr	r26
 980:	97 95       	ror	r25
 982:	87 95       	ror	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	ba 95       	dec	r27
 98a:	c9 f7       	brne	.-14     	; 0x97e <__ultoa_invert+0x86>
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	61 05       	cpc	r22, r1
 990:	71 05       	cpc	r23, r1
 992:	08 95       	ret
 994:	9b 01       	movw	r18, r22
 996:	ac 01       	movw	r20, r24
 998:	0a 2e       	mov	r0, r26
 99a:	06 94       	lsr	r0
 99c:	57 95       	ror	r21
 99e:	47 95       	ror	r20
 9a0:	37 95       	ror	r19
 9a2:	27 95       	ror	r18
 9a4:	ba 95       	dec	r27
 9a6:	c9 f7       	brne	.-14     	; 0x99a <__ultoa_invert+0xa2>
 9a8:	62 0f       	add	r22, r18
 9aa:	73 1f       	adc	r23, r19
 9ac:	84 1f       	adc	r24, r20
 9ae:	95 1f       	adc	r25, r21
 9b0:	a0 1d       	adc	r26, r0
 9b2:	08 95       	ret

000009b4 <__prologue_saves__>:
 9b4:	2f 92       	push	r2
 9b6:	3f 92       	push	r3
 9b8:	4f 92       	push	r4
 9ba:	5f 92       	push	r5
 9bc:	6f 92       	push	r6
 9be:	7f 92       	push	r7
 9c0:	8f 92       	push	r8
 9c2:	9f 92       	push	r9
 9c4:	af 92       	push	r10
 9c6:	bf 92       	push	r11
 9c8:	cf 92       	push	r12
 9ca:	df 92       	push	r13
 9cc:	ef 92       	push	r14
 9ce:	ff 92       	push	r15
 9d0:	0f 93       	push	r16
 9d2:	1f 93       	push	r17
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	ca 1b       	sub	r28, r26
 9de:	db 0b       	sbc	r29, r27
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
 9ea:	09 94       	ijmp

000009ec <__epilogue_restores__>:
 9ec:	2a 88       	ldd	r2, Y+18	; 0x12
 9ee:	39 88       	ldd	r3, Y+17	; 0x11
 9f0:	48 88       	ldd	r4, Y+16	; 0x10
 9f2:	5f 84       	ldd	r5, Y+15	; 0x0f
 9f4:	6e 84       	ldd	r6, Y+14	; 0x0e
 9f6:	7d 84       	ldd	r7, Y+13	; 0x0d
 9f8:	8c 84       	ldd	r8, Y+12	; 0x0c
 9fa:	9b 84       	ldd	r9, Y+11	; 0x0b
 9fc:	aa 84       	ldd	r10, Y+10	; 0x0a
 9fe:	b9 84       	ldd	r11, Y+9	; 0x09
 a00:	c8 84       	ldd	r12, Y+8	; 0x08
 a02:	df 80       	ldd	r13, Y+7	; 0x07
 a04:	ee 80       	ldd	r14, Y+6	; 0x06
 a06:	fd 80       	ldd	r15, Y+5	; 0x05
 a08:	0c 81       	ldd	r16, Y+4	; 0x04
 a0a:	1b 81       	ldd	r17, Y+3	; 0x03
 a0c:	aa 81       	ldd	r26, Y+2	; 0x02
 a0e:	b9 81       	ldd	r27, Y+1	; 0x01
 a10:	ce 0f       	add	r28, r30
 a12:	d1 1d       	adc	r29, r1
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	ed 01       	movw	r28, r26
 a20:	08 95       	ret

00000a22 <_exit>:
 a22:	f8 94       	cli

00000a24 <__stop_program>:
 a24:	ff cf       	rjmp	.-2      	; 0xa24 <__stop_program>
